import tkinter as tk
from tkinter import messagebox, simpledialog, ttk, filedialog
import json
import os
import cv2
import requests
import time
import re
from datetime import datetime, timedelta
from openpyxl import Workbook, load_workbook
import logging
import threading
from pathlib import Path
from PIL import Image, ImageTk
import io

# –Ü–º–ø–æ—Ä—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤
try:
    import barcode
    from barcode.writer import ImageWriter
    BARCODE_AVAILABLE = True
except ImportError:
    BARCODE_AVAILABLE = False
    print("–ú–æ–¥—É–ª—å barcode –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install python-barcode[images]")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ OpenCV –¥–ª—è RTSP
RTSP_AVAILABLE = True
try:
    import cv2
except ImportError:
    RTSP_AVAILABLE = False
    print("OpenCV –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install opencv-python")

CONFIG_FILE = "config.json"
LOG_FILE = "app.log"

# –û—Ç—Ä–∏–º—É—î–º–æ —à–ª—è—Ö –¥–æ —Ä–æ–±–æ—á–æ–≥–æ —Å—Ç–æ–ª—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
DEFAULT_DESKTOP_PATH = Path.home() / "Desktop"
DEFAULT_SAVE_FOLDER = DEFAULT_DESKTOP_PATH / "SkanerFoto"

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è: –≤ —Ñ–∞–π–ª —ñ –≤ –∫–æ–Ω—Å–æ–ª—å, –∑ —Ä—ñ–≤–Ω–µ–º INFO
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler()
    ]
)

def validate_ip_address(ip):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ IP-–∞–¥—Ä–µ—Å–∏"""
    pattern = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'
    return re.match(pattern, ip) is not None

def load_config():
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, "r", encoding="utf-8") as f:
                config = json.load(f)
                logging.info("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –∑ —Ñ–∞–π–ª—É.")
                return config
        except (json.JSONDecodeError, Exception) as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
            return create_default_config()
    else:
        logging.info("–§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä–µ–Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞.")
        return create_default_config()

def create_default_config():
    return {
        "telegram_token": "",
        "telegram_chat_id": "",
        "camera_ip": "",
        "camera_login": "",
        "camera_password": "",
        "recorder_ip": "",
        "recorder_login": "",
        "recorder_password": "",
        "recorder_port": "554",
        "recorder_channel": "1",
        "recorder_rtsp_template": "hikvision",
        "use_recorder": True,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–º—ñ—Å—Ç—å –æ–∫—Ä–µ–º–æ—ó –∫–∞–º–µ—Ä–∏
        "save_folder": str(DEFAULT_SAVE_FOLDER),
        "packers": []
    }

def save_config(config):
    try:
        os.makedirs(os.path.dirname(CONFIG_FILE) if os.path.dirname(CONFIG_FILE) else ".", exist_ok=True)
        with open(CONFIG_FILE, "w", encoding="utf-8") as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
        logging.info("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É —Ñ–∞–π–ª.")
        return True
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
        return False

def ensure_save_folder(folder_path):
    """–°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è"""
    try:
        Path(folder_path).mkdir(parents=True, exist_ok=True)
        logging.info(f"–ü–∞–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {folder_path}")
        return True
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")
        return False

def get_current_save_folder():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –ø–∞–ø–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    config = load_config()
    return config.get("save_folder", str(DEFAULT_SAVE_FOLDER))

def generate_barcode_image(code):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –≤ –ø–∞–º'—è—Ç—ñ (–±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è)"""
    if not BARCODE_AVAILABLE:
        return None
    
    try:
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —à—Ç—Ä–∏—Ö–∫–æ–¥ Code128
        code128 = barcode.get_barcode_class('code128')
        barcode_instance = code128(code, writer=ImageWriter())
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ BytesIO (–≤ –ø–∞–º'—è—Ç—ñ)
        buffer = io.BytesIO()
        barcode_instance.write(buffer)
        buffer.seek(0)
        
        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —è–∫ PIL Image
        img = Image.open(buffer)
        
        logging.info(f"–®—Ç—Ä–∏—Ö–∫–æ–¥ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –≤ –ø–∞–º'—è—Ç—ñ –¥–ª—è –∫–æ–¥—É: {code}")
        return img
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —à—Ç—Ä–∏—Ö–∫–æ–¥–∞: {e}")
        return None

def get_rtsp_templates():
    """–®–∞–±–ª–æ–Ω–∏ RTSP URL –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –≤–∏—Ä–æ–±–Ω–∏–∫—ñ–≤"""
    return {
        "hikvision": {
            "name": "Hikvision",
            "main": "rtsp://{login}:{password}@{ip}:{port}/Streaming/Channels/{channel}01",
            "sub": "rtsp://{login}:{password}@{ip}:{port}/Streaming/Channels/{channel}02"
        },
        "dahua": {
            "name": "Dahua",
            "main": "rtsp://{login}:{password}@{ip}:{port}/cam/realmonitor?channel={channel}&subtype=0",
            "sub": "rtsp://{login}:{password}@{ip}:{port}/cam/realmonitor?channel={channel}&subtype=1"
        },
        "generic": {
            "name": "–ó–∞–≥–∞–ª—å–Ω–∏–π",
            "main": "rtsp://{login}:{password}@{ip}:{port}/live/ch{channel}",
            "sub": "rtsp://{login}:{password}@{ip}:{port}/live/ch{channel}_sub"
        },
        "axis": {
            "name": "Axis",
            "main": "rtsp://{login}:{password}@{ip}:{port}/axis-media/media.amp?videocodec=h264&resolution=1920x1080",
            "sub": "rtsp://{login}:{password}@{ip}:{port}/axis-media/media.amp?videocodec=h264&resolution=640x480"
        },
        "foscam": {
            "name": "Foscam",
            "main": "rtsp://{login}:{password}@{ip}:{port}/videoMain",
            "sub": "rtsp://{login}:{password}@{ip}:{port}/videoSub"
        }
    }

def test_rtsp_connection(ip, port, login, password, template, channel):
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è RTSP –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"""
    if not RTSP_AVAILABLE:
        return False, "OpenCV –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install opencv-python"
    
    try:
        templates = get_rtsp_templates()
        
        if template not in templates:
            return False, f"–ù–µ–≤—ñ–¥–æ–º–∏–π —à–∞–±–ª–æ–Ω: {template}"
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ RTSP URL
        rtsp_data = templates[template]
        rtsp_url = rtsp_data["main"].format(
            login=login, 
            password=password, 
            ip=ip, 
            port=port, 
            channel=channel
        )
        
        logging.info(f"[RTSP Test] –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {rtsp_url}")
        
        # –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        cap = cv2.VideoCapture(rtsp_url)
        
        if not cap.isOpened():
            cap.release()
            return False, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ RTSP –ø–æ—Ç–æ–∫—É\n\nURL: {rtsp_url}\n\nüîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:\n‚Ä¢ IP-–∞–¥—Ä–µ—Å—É —Ç–∞ –ø–æ—Ä—Ç\n‚Ä¢ –õ–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å\n‚Ä¢ –ù–æ–º–µ—Ä –∫–∞–Ω–∞–ª—É\n‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂—ñ"
        
        # –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –∫–∞–¥—Ä
        ret, frame = cap.read()
        cap.release()
        
        if not ret or frame is None:
            return False, f"‚ùå RTSP –ø–æ—Ç—ñ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ, –∞–ª–µ –Ω–µ–º–∞—î –≤—ñ–¥–µ–æ\n\nURL: {rtsp_url}\n\nüîß –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:\n‚Ä¢ –ö–∞–Ω–∞–ª –≤–∏–º–∫–Ω–µ–Ω–∏–π\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∏ –∑ –∫–æ–¥–µ–∫–æ–º\n‚Ä¢ –ü–æ—Ç—ñ–∫ –∑–∞–π–Ω—è—Ç–∏–π —ñ–Ω—à–∏–º –∫–ª—ñ—î–Ω—Ç–æ–º"
        
        height, width = frame.shape[:2]
        info = f"‚úÖ RTSP –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!\n\n"
        info += f"–í–∏—Ä–æ–±–Ω–∏–∫: {rtsp_data['name']}\n"
        info += f"URL: {rtsp_url}\n"
        info += f"–†–æ–∑—à–∏—Ä–µ–Ω–Ω—è: {width}x{height}\n"
        info += f"–ö–∞–Ω–∞–ª: {channel}"
        
        return True, info
        
    except Exception as e:
        return False, f"–ü–æ–º–∏–ª–∫–∞ RTSP —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {str(e)}"

def get_rtsp_screenshot(ip, port, login, password, template, channel):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∑ RTSP –ø–æ—Ç–æ–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not RTSP_AVAILABLE:
        logging.error("[RTSP] OpenCV –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return None
    
    try:
        templates = get_rtsp_templates()
        
        if template not in templates:
            logging.error(f"[RTSP] –ù–µ–≤—ñ–¥–æ–º–∏–π —à–∞–±–ª–æ–Ω: {template}")
            return None
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ RTSP URL (—Å–ø–æ—á–∞—Ç–∫—É –æ—Å–Ω–æ–≤–Ω–∏–π –ø–æ—Ç—ñ–∫, –ø–æ—Ç—ñ–º —Å—É–±–ø–æ—Ç—ñ–∫)
        rtsp_data = templates[template]
        rtsp_urls = [
            rtsp_data["main"].format(login=login, password=password, ip=ip, port=port, channel=channel),
            rtsp_data["sub"].format(login=login, password=password, ip=ip, port=port, channel=channel)
        ]
        
        for rtsp_url in rtsp_urls:
            try:
                logging.info(f"[RTSP Screenshot] –°–ø—Ä–æ–±–∞: {rtsp_url}")
                
                cap = cv2.VideoCapture(rtsp_url)
                
                if not cap.isOpened():
                    logging.warning(f"[RTSP Screenshot] –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏: {rtsp_url}")
                    continue
                
                # –ß–∏—Ç–∞—î–º–æ –¥–µ–∫—ñ–ª—å–∫–∞ –∫–∞–¥—Ä—ñ–≤ –¥–ª—è —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó
                for i in range(5):
                    ret, frame = cap.read()
                    if not ret:
                        break
                
                cap.release()
                
                if ret and frame is not None:
                    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É temp, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
                    save_folder = Path(get_current_save_folder()) / "temp"
                    save_folder.mkdir(exist_ok=True)
                    screenshot_path = save_folder / f"rtsp_screenshot_{int(time.time())}.jpg"
                    
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–∫—Ä–∏–Ω—à–æ—Ç
                    cv2.imwrite(str(screenshot_path), frame)
                    
                    if screenshot_path.exists() and screenshot_path.stat().st_size > 1024:
                        logging.info(f"[RTSP Screenshot] –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ: {screenshot_path}")
                        return str(screenshot_path)
                    else:
                        if screenshot_path.exists():
                            screenshot_path.unlink()
                        logging.warning(f"[RTSP Screenshot] –§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∏–π")
                else:
                    logging.warning(f"[RTSP Screenshot] –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –∫–∞–¥—Ä –∑ {rtsp_url}")
                
            except Exception as e:
                logging.error(f"[RTSP Screenshot] –ü–æ–º–∏–ª–∫–∞ –¥–ª—è {rtsp_url}: {e}")
                continue
        
        logging.error("[RTSP Screenshot] –í—Å—ñ —Å–ø—Ä–æ–±–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–µ–≤–¥–∞–ª—ñ")
        return None
        
    except Exception as e:
        logging.error(f"[RTSP Screenshot] –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        return None

def send_telegram_message(token, chat_id, message):
    if not token or not chat_id:
        logging.warning("[Telegram] –¢–æ–∫–µ–Ω –∞–±–æ Chat ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ")
        return False
    
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    try:
        response = requests.post(url, data={"chat_id": chat_id, "text": message}, timeout=10)
        if response.status_code == 200:
            logging.info(f"[Telegram] –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return True
        else:
            logging.error(f"[Telegram] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
    except Exception as e:
        logging.error(f"[Telegram Error] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        return False

def send_telegram_photo(token, chat_id, photo_path, caption=""):
    if not token or not chat_id:
        logging.warning("[Telegram] –¢–æ–∫–µ–Ω –∞–±–æ Chat ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ")
        return False
    
    if not os.path.exists(photo_path):
        logging.error(f"[Telegram Photo] –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {photo_path}")
        return False
    
    url = f"https://api.telegram.org/bot{token}/sendPhoto"
    try:
        with open(photo_path, "rb") as f:
            files = {"photo": f}
            data = {"chat_id": chat_id, "caption": caption}
            response = requests.post(url, files=files, data=data, timeout=30)
            if response.status_code == 200:
                logging.info(f"[Telegram Photo] –§–æ—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –°—Ç–∞—Ç—É—Å: {response.status_code}")
                return True
            else:
                logging.error(f"[Telegram Photo] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ. –°—Ç–∞—Ç—É—Å: {response.status_code}")
                return False
    except Exception as e:
        logging.error(f"[Telegram Photo Error] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        return False

def test_camera_connection_advanced(ip, login, password):
    """–†–æ–∑—à–∏—Ä–µ–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –∫–∞–º–µ—Ä–∏"""
    if not validate_ip_address(ip):
        return False, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ IP-–∞–¥—Ä–µ—Å–∞"
    
    # –°–ø–∏—Å–æ–∫ –º–æ–∂–ª–∏–≤–∏—Ö URL –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∫–∞–º–µ—Ä
    test_urls = [
        f"http://{ip}/cgi-bin/snapshot.cgi",  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π CGI
        f"http://{ip}/snapshot.cgi",          # –ë–µ–∑ cgi-bin
        f"http://{ip}/cgi-bin/snapshot.jpg",  # –ó —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º
        f"http://{ip}/snapshot.jpg",          # –ü—Ä–æ—Å—Ç–∏–π snapshot
        f"http://{ip}/image/jpeg.cgi",        # Axis –∫–∞–º–µ—Ä–∏
        f"http://{ip}/jpg/image.jpg",         # –î–µ—è–∫—ñ IP –∫–∞–º–µ—Ä–∏
        f"http://{ip}/videostream.cgi?rate=0&user={login}&pwd={password}",  # –ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤ URL
    ]
    
    results = []
    
    for url in test_urls:
        try:
            # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ –º–µ—Ç–æ–¥–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
            auth_methods = [
                ("Basic Auth", requests.auth.HTTPBasicAuth(login, password)),
                ("Digest Auth", requests.auth.HTTPDigestAuth(login, password)),
                ("No Auth", None),
            ]
            
            for auth_name, auth in auth_methods:
                try:
                    response = requests.get(url, auth=auth, timeout=5)
                    status = response.status_code
                    content_type = response.headers.get('content-type', '')
                    
                    result_info = f"{url} [{auth_name}] - Status: {status}"
                    
                    if status == 200:
                        if 'image' in content_type.lower():
                            return True, f"‚úÖ –£—Å–ø—ñ—Ö! {result_info}\n–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É: {content_type}"
                        else:
                            result_info += f" (–ù–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {content_type})"
                    elif status == 401:
                        result_info += " (–ü–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó)"
                    elif status == 404:
                        result_info += " (URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)"
                    elif status == 403:
                        result_info += " (–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ)"
                    
                    results.append(result_info)
                    
                except requests.exceptions.Timeout:
                    results.append(f"{url} [{auth_name}] - –¢–∞–π–º–∞—É—Ç")
                except requests.exceptions.ConnectionError:
                    results.append(f"{url} [{auth_name}] - –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è")
                except Exception as e:
                    results.append(f"{url} [{auth_name}] - –ü–æ–º–∏–ª–∫–∞: {str(e)}")
                    
        except Exception as e:
            results.append(f"{url} - –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
    
    return False, "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –∫–∞–º–µ—Ä–∏.\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:\n" + "\n".join(results)

def get_camera_snapshot_advanced(ip, login, password):
    """–ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω—ñ–º–∫—ñ–≤ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ä—ñ–∑–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤"""
    if not validate_ip_address(ip):
        logging.error(f"[Snapshot] –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ IP-–∞–¥—Ä–µ—Å–∞: {ip}")
        return None
    
    # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ URL —Ç–∞ –º–µ—Ç–æ–¥–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    urls_to_try = [
        f"http://{ip}/cgi-bin/snapshot.cgi",
        f"http://{ip}/snapshot.cgi",
        f"http://{ip}/cgi-bin/snapshot.jpg",
        f"http://{ip}/snapshot.jpg",
        f"http://{ip}/image/jpeg.cgi",
    ]
    
    auth_methods = [
        ("Basic", requests.auth.HTTPBasicAuth(login, password)),
        ("Digest", requests.auth.HTTPDigestAuth(login, password)),
    ]
    
    for url in urls_to_try:
        for auth_name, auth in auth_methods:
            try:
                logging.info(f"[Snapshot] –°–ø—Ä–æ–±–∞: {url} –∑ {auth_name} Auth")
                response = requests.get(url, auth=auth, stream=True, timeout=10)
                
                if response.status_code == 200:
                    content_type = response.headers.get('content-type', '')
                    if 'image' in content_type.lower():
                        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É temp, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
                        save_folder = Path(get_current_save_folder())
                        temp_folder = save_folder / "temp"
                        temp_folder.mkdir(parents=True, exist_ok=True)
                        img_path = temp_folder / f"snap_{int(time.time())}.jpg"
                        
                        with open(img_path, "wb") as f:
                            for chunk in response.iter_content(1024):
                                f.write(chunk)
                        
                        logging.info(f"[Snapshot] –ó–Ω—ñ–º–æ–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ: {img_path} (–º–µ—Ç–æ–¥: {auth_name}, URL: {url})")
                        return str(img_path)
                    else:
                        logging.warning(f"[Snapshot] –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {content_type}")
                else:
                    logging.warning(f"[Snapshot] HTTP {response.status_code} –¥–ª—è {url} –∑ {auth_name}")
                    
            except requests.exceptions.Timeout:
                logging.warning(f"[Snapshot] –¢–∞–π–º–∞—É—Ç –¥–ª—è {url} –∑ {auth_name}")
            except requests.exceptions.ConnectionError:
                logging.warning(f"[Snapshot] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–ª—è {url} –∑ {auth_name}")
            except Exception as e:
                logging.error(f"[Snapshot] –ü–æ–º–∏–ª–∫–∞ {url} –∑ {auth_name}: {e}")
    
    logging.error("[Snapshot] –í—Å—ñ —Å–ø—Ä–æ–±–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω—ñ–º–∫–∞ –Ω–µ–≤–¥–∞–ª—ñ")
    return None

def cleanup_temp_files():
    """–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    try:
        save_folder = Path(get_current_save_folder())
        temp_folder = save_folder / "temp"
        if temp_folder.exists():
            for file_path in temp_folder.iterdir():
                if file_path.is_file():
                    # –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª–∏ —Å—Ç–∞—Ä—à—ñ 1 –≥–æ–¥–∏–Ω–∏
                    if time.time() - file_path.stat().st_ctime > 3600:
                        file_path.unlink()
                        logging.info(f"–í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏–π —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª: {file_path}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤: {e}")

def cleanup_old_files():
    """–û—á–∏—â–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —Å—Ç–∞—Ä—à–µ 2 —Ç–∏–∂–Ω—ñ–≤"""
    try:
        save_folder = Path(get_current_save_folder())
        two_weeks_ago = datetime.now() - timedelta(weeks=2)
        deleted_count = 0
        
        # –û—á–∏—â–µ–Ω–Ω—è –ø–∞–ø–∫–∏ sessions
        sessions_folder = save_folder / "sessions"
        if sessions_folder.exists():
            for session_path in sessions_folder.iterdir():
                if session_path.is_dir():
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏
                    if datetime.fromtimestamp(session_path.stat().st_ctime) < two_weeks_ago:
                        # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –≤ –ø–∞–ø—Ü—ñ
                        for file_path in session_path.iterdir():
                            if file_path.is_file():
                                file_path.unlink()
                                deleted_count += 1
                        # –í–∏–¥–∞–ª—è—î–º–æ —Å–∞–º—É –ø–∞–ø–∫—É, —è–∫—â–æ –≤–æ–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è
                        try:
                            session_path.rmdir()
                            logging.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –ø–∞–ø–∫—É —Å–µ—Å—ñ—ó: {session_path}")
                        except OSError:
                            logging.warning(f"–ü–∞–ø–∫–∞ –Ω–µ –≤–∏–¥–∞–ª–µ–Ω–∞ (–Ω–µ –ø–æ—Ä–æ–∂–Ω—è): {session_path}")
                    else:
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–∞–π–ª–∏ –≤ –ø–∞–ø—Ü—ñ
                        for file_path in session_path.iterdir():
                            if file_path.is_file():
                                if datetime.fromtimestamp(file_path.stat().st_ctime) < two_weeks_ago:
                                    file_path.unlink()
                                    deleted_count += 1
        
        # –û—á–∏—â–µ–Ω–Ω—è –ø–∞–ø–∫–∏ temp
        temp_folder = save_folder / "temp"
        if temp_folder.exists():
            for file_path in temp_folder.iterdir():
                if file_path.is_file():
                    if datetime.fromtimestamp(file_path.stat().st_ctime) < two_weeks_ago:
                        file_path.unlink()
                        deleted_count += 1
        
        logging.info(f"–û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: {deleted_count}")
        return deleted_count
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ñ–∞–π–ª—ñ–≤: {e}")
        return -1

def log_to_excel(folder, barcode, timestamp):
    try:
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        folder_path = Path(folder)
        folder_path.mkdir(parents=True, exist_ok=True)
        filename = folder_path / "session_log.xlsx"
        
        if filename.exists():
            wb = load_workbook(filename)
            ws = wb.active
        else:
            wb = Workbook()
            ws = wb.active
            ws.append(["–ß–∞—Å", "–®—Ç—Ä–∏—Ö–∫–æ–¥"])
        
        ws.append([timestamp, barcode])
        wb.save(filename)
        logging.info(f"[Excel] –ó–∞–ø–∏—Å –¥–æ –∂—É—Ä–Ω–∞–ª—É: {barcode} –æ {timestamp}")
        return True
    except Exception as e:
        logging.error(f"[Excel] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –≤ Excel: {e}")
        return False

class BarcodeProcessor:
    def __init__(self, config):
        self.config = config
        self.current_packer = None
        self.session_folder = None
        logging.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ BarcodeProcessor.")

    def process_code(self, code):
        code = code.strip()
        if not code:
            logging.warning("–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –∫–æ–¥")
            return "–ü–æ—Ä–æ–∂–Ω—ñ–π –∫–æ–¥"
        
        now_str = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–¥: {code}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ ID –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞ (3 —Ü–∏—Ñ—Ä–∏)
        if len(code) == 3 and code.isdigit():
            packer = next((p for p in self.config["packers"] if p["id"] == code), None)
            if packer:
                self.current_packer = packer
                # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É sessions
                save_folder = Path(self.config.get("save_folder", str(DEFAULT_SAVE_FOLDER)))
                sessions_folder = save_folder / "sessions"
                sessions_folder.mkdir(parents=True, exist_ok=True)
                self.session_folder = sessions_folder / f"{now_str}_{packer['name']}_{packer['id']}"
                try:
                    self.session_folder.mkdir(exist_ok=True)
                    logging.info(f"–û–±—Ä–∞–Ω–æ –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞: {packer['name']} (ID {packer['id']}). –°—Ç–≤–æ—Ä–µ–Ω–∞ —Å–µ—Å—ñ–π–Ω–∞ –ø–∞–ø–∫–∞ {self.session_folder}")
                    send_telegram_message(self.config["telegram_token"], self.config["telegram_chat_id"],
                                          f"üßë‚Äçüè≠ –ü–∞–∫—É–≤–∞–ª—å–Ω–∏–∫ {packer['name']} (#{packer['id']}) –ø–æ—á–∞–≤ —Ä–æ–±–æ—Ç—É.")
                    return f"–û–±—Ä–∞–Ω–æ –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞: {packer['name']}"
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ —Å–µ—Å—ñ—ó: {e}")
                    return "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ —Å–µ—Å—ñ—ó"
            else:
                logging.warning(f"–ü–∞–∫—É–≤–∞–ª—å–Ω–∏–∫ –∑ ID {code} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
                return f"–ü–∞–∫—É–≤–∞–ª—å–Ω–∏–∫ –∑ ID {code} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π"

        # –û–±—Ä–æ–±–∫–∞ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ —Ç–æ–≤–∞—Ä—É
        if self.current_packer:
            return self.process_product_barcode(code)
        else:
            logging.warning("–°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Å–∫–∞–Ω—É–π—Ç–µ ID –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞!")
            return "–°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Å–∫–∞–Ω—É–π—Ç–µ ID –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞!"

    def process_product_barcode(self, code):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –¥–∂–µ—Ä–µ–ª–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä –∞–±–æ –æ–∫—Ä–µ–º–∞ –∫–∞–º–µ—Ä–∞
        snapshot_path = None
        
        if self.config.get("use_recorder", True) and self.config.get("recorder_ip"):
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–∫—Ä–∏–Ω—à–æ—Ç –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ RTSP
            logging.info("[Snapshot] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç—ñ–≤")
            snapshot_path = get_rtsp_screenshot(
                self.config["recorder_ip"],
                self.config.get("recorder_port", "554"),
                self.config["recorder_login"],
                self.config["recorder_password"],
                self.config.get("recorder_rtsp_template", "hikvision"),
                self.config.get("recorder_channel", "1")
            )
        elif self.config.get("camera_ip"):
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–∫—Ä–∏–Ω—à–æ—Ç –∑ –æ–∫—Ä–µ–º–æ—ó –∫–∞–º–µ—Ä–∏
            logging.info("[Snapshot] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–∫—Ä–µ–º—É –∫–∞–º–µ—Ä—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç—ñ–≤")
            snapshot_path = get_camera_snapshot_advanced(
                self.config["camera_ip"],
                self.config["camera_login"],
                self.config["camera_password"]
            )
        
        if snapshot_path:
            filename = f"{code}_{timestamp.replace(':', '-').replace(' ', '_')}.jpg"
            final_path = self.session_folder / filename
            
            try:
                img = cv2.imread(snapshot_path)
                if img is not None:
                    # –î–æ–¥–∞—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    cv2.putText(img, f"{code} {timestamp}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX,
                                1, (0, 0, 255), 2, cv2.LINE_AA)
                    
                    # –î–æ–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–∂–µ—Ä–µ–ª–æ
                    source_info = "–†–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä" if self.config.get("use_recorder", True) else "–ö–∞–º–µ—Ä–∞"
                    cv2.putText(img, f"–î–∂–µ—Ä–µ–ª–æ: {source_info}", (10, 70), cv2.FONT_HERSHEY_SIMPLEX,
                                0.7, (0, 255, 0), 2, cv2.LINE_AA)
                    
                    cv2.imwrite(str(final_path), img)
                    
                    # –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
                    try:
                        Path(snapshot_path).unlink()
                    except:
                        pass
                    
                    logging
