#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞ v3.0 - RTSP —Å–∫—Ä–∏–Ω—à–æ—Ç–∏
–ü—Ä–æ–≥—Ä–∞–º–∞ –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ —á–µ—Ä–µ–∑ RTSP
"""

# ============================================================================
# –Ü–ú–ü–û–†–¢–ò
# ============================================================================

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ Python
import tkinter as tk
from tkinter import messagebox, simpledialog, ttk, filedialog
import json
import os
import time
import re
import logging
import threading
import io
from datetime import datetime, timedelta
from pathlib import Path

# –°—Ç–æ—Ä–æ–Ω–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
import requests
from openpyxl import Workbook, load_workbook
from PIL import Image, ImageTk

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
try:
    import cv2
    OPENCV_AVAILABLE = True
except ImportError:
    OPENCV_AVAILABLE = False
    print("OpenCV –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install opencv-python")

try:
    import barcode
    from barcode.writer import ImageWriter
    BARCODE_AVAILABLE = True
except ImportError:
    BARCODE_AVAILABLE = False
    print("–ú–æ–¥—É–ª—å barcode –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install python-barcode[images]")

# ============================================================================
# –ö–û–ù–°–¢–ê–ù–¢–ò –¢–ê –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø
# ============================================================================

CONFIG_FILE = "config.json"
LOG_FILE = "app.log"

# –û—Ç—Ä–∏–º—É—î–º–æ —à–ª—è—Ö –¥–æ —Ä–æ–±–æ—á–æ–≥–æ —Å—Ç–æ–ª—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
DEFAULT_DESKTOP_PATH = Path.home() / "Desktop"
DEFAULT_SAVE_FOLDER = DEFAULT_DESKTOP_PATH / "SkanerFoto"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ RTSP (–∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ OpenCV)
RTSP_AVAILABLE = OPENCV_AVAILABLE

# ============================================================================
# –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –õ–û–ì–£–í–ê–ù–ù–Ø
# ============================================================================

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# ============================================================================
# –£–¢–ò–õ–Ü–¢–ê–†–ù–Ü –§–£–ù–ö–¶–Ü–á
# ============================================================================

def validate_ip_address(ip):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ IP-–∞–¥—Ä–µ—Å–∏"""
    pattern = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'
    return re.match(pattern, ip) is not     def add_packer(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        pid = simpledialog.askstring("ID –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞", "–í–≤–µ–¥—ñ—Ç—å ID –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞ (–±—É–¥—å-—è–∫–∞ –¥–æ–≤–∂–∏–Ω–∞):")
        if not pid:
            return
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ ID –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
        pid = pid.strip()
        if not pid:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "ID –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º!")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å ID
        if any(p["id"] == pid for p in self.config["packers"]):
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ü–∞–∫—É–≤–∞–ª—å–Ω–∏–∫ –∑ —Ç–∞–∫–∏–º ID –≤–∂–µ —ñ—Å–Ω—É—î!")
            return
        
        name = simpledialog.askstring("–Ü–º'—è –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞", "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞:")
        if name:
            self.config["packers"].append({"id": pid, "name": name.strip()})
            self.refresh_packers()
            logging.info(f"–î–æ–¥–∞–Ω–æ –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞: {name} (ID {pid}).")
            self.status_var.set(f"–î–æ–¥–∞–Ω–æ –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞: {name}")

        
        now_str = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–¥: {code}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ ID –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞ (–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö)
        packer = next((p for p in self.config["packers"] if p["id"] == code), None)
        if packer:
            self.current_packer = packer
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É sessions
            save_folder = Path(self.config.get("save_folder", str(DEFAULT_SAVE_FOLDER)))
            sessions_folder = save_folder / "sessions"
            sessions_folder.mkdir(parents=True, exist_ok=True)
            self.session_folder = sessions_folder / f"{now_str}_{packer['name']}_{packer['id']}"
            try:
                self.session_folder.mkdir(exist_ok=True)
                logging.info(f"–û–±—Ä–∞–Ω–æ –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞: {packer['name']} (ID {packer['id']}). –°—Ç–≤–æ—Ä–µ–Ω–∞ —Å–µ—Å—ñ–π–Ω–∞ –ø–∞–ø–∫–∞ {self.session_folder}")
                send_telegram_message(self.config["telegram_token"], self.config["telegram_chat_id"],
                                      f"üßë‚Äçüè≠ –ü–∞–∫—É–≤–∞–ª—å–Ω–∏–∫ {packer['name']} (#{packer['id']}) –ø–æ—á–∞–≤ —Ä–æ–±–æ—Ç—É.")
                return f"–û–±—Ä–∞–Ω–æ –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞: {packer['name']}"
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ —Å–µ—Å—ñ—ó: {e}")
                return "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ —Å–µ—Å—ñ—ó"

        # –û–±—Ä–æ–±–∫–∞ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ —Ç–æ–≤–∞—Ä—É
        if self.current_packer:
            return self.process_product_barcode(code)
        else:
            logging.warning("–°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Å–∫–∞–Ω—É–π—Ç–µ ID –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞!")
            return "–°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Å–∫–∞–Ω—É–π—Ç–µ ID –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞!"

    # ========================================================================
    # –ú–ï–¢–û–î–ò –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨
    # ========================================================================

    def save_all(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –æ—Å–Ω–æ–≤–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
        ip = self.ip_entry.get().strip()
        if ip and not validate_ip_address(ip):
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ IP-–∞–¥—Ä–µ—Å–∞ –∫–∞–º–µ—Ä–∏!")
            return
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —à–ª—è—Ö—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        save_path = self.save_path_var.get()
        if not save_path:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è!")
            return
        
        self.config["camera_ip"] = ip
        self.config["camera_login"] = self.login_entry.get().strip()
        self.config["camera_password"] = self.pass_entry.get()
        self.config["use_recorder"] = self.use_recorder_var.get()
        self.config["save_folder"] = save_path
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        ensure_save_folder(save_path)
        
        if save_config(self.config):
            self.processor = BarcodeProcessor(self.config)
            logging.info("–ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
            messagebox.showinfo("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
            self.status_var.set("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
        else:
            messagebox.showerror("‚ùå –ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è!")
            self.status_var.set("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")

    def save_telegram_settings(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Telegram"""
        self.config["telegram_token"] = self.token_entry.get().strip()
        self.config["telegram_chat_id"] = self.chat_entry.get().strip()
        
        if save_config(self.config):
            self.processor = BarcodeProcessor(self.config)
            logging.info("–ó–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram.")
            messagebox.showinfo("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
            self.status_var.set("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
        else:
            messagebox.showerror("‚ùå –ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è!")
            self.status_var.set("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")

def cleanup_temp_files():
    """–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    try:
        save_folder = Path(get_current_save_folder())
        temp_folder = save_folder / "temp"
        if temp_folder.exists():
            for file_path in temp_folder.iterdir():
                if file_path.is_file():
                    # –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª–∏ —Å—Ç–∞—Ä—à—ñ 1 –≥–æ–¥–∏–Ω–∏
                    if time.time() - file_path.stat().st_ctime > 3600:
                        file_path.unlink()
                        logging.info(f"–í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏–π —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª: {file_path}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤: {e}")

def cleanup_old_files():
    """–û—á–∏—â–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —Å—Ç–∞—Ä—à–µ 2 —Ç–∏–∂–Ω—ñ–≤"""
    try:
        save_folder = Path(get_current_save_folder())
        two_weeks_ago = datetime.now() - timedelta(weeks=2)
        deleted_count = 0
        
        # –û—á–∏—â–µ–Ω–Ω—è –ø–∞–ø–∫–∏ sessions
        sessions_folder = save_folder / "sessions"
        if sessions_folder.exists():
            for session_path in sessions_folder.iterdir():
                if session_path.is_dir():
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏
                    if datetime.fromtimestamp(session_path.stat().st_ctime) < two_weeks_ago:
                        # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –≤ –ø–∞–ø—Ü—ñ
                        for file_path in session_path.iterdir():
                            if file_path.is_file():
                                file_path.unlink()
                                deleted_count += 1
                        # –í–∏–¥–∞–ª—è—î–º–æ —Å–∞–º—É –ø–∞–ø–∫—É, —è–∫—â–æ –≤–æ–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è
                        try:
                            session_path.rmdir()
                            logging.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –ø–∞–ø–∫—É —Å–µ—Å—ñ—ó: {session_path}")
                        except OSError:
                            logging.warning(f"–ü–∞–ø–∫–∞ –Ω–µ –≤–∏–¥–∞–ª–µ–Ω–∞ (–Ω–µ –ø–æ—Ä–æ–∂–Ω—è): {session_path}")
                    else:
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–∞–π–ª–∏ –≤ –ø–∞–ø—Ü—ñ
                        for file_path in session_path.iterdir():
                            if file_path.is_file():
                                if datetime.fromtimestamp(file_path.stat().st_ctime) < two_weeks_ago:
                                    file_path.unlink()
                                    deleted_count += 1
        
        # –û—á–∏—â–µ–Ω–Ω—è –ø–∞–ø–∫–∏ temp
        temp_folder = save_folder / "temp"
        if temp_folder.exists():
            for file_path in temp_folder.iterdir():
                if file_path.is_file():
                    if datetime.fromtimestamp(file_path.stat().st_ctime) < two_weeks_ago:
                        file_path.unlink()
                        deleted_count += 1
        
        logging.info(f"–û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: {deleted_count}")
        return deleted_count
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ñ–∞–π–ª—ñ–≤: {e}")
        return -1

# ============================================================================
# –§–£–ù–ö–¶–Ü–á –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á
# ============================================================================

def load_config():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ —Ñ–∞–π–ª—É"""
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, "r", encoding="utf-8") as f:
                config = json.load(f)
                logging.info("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –∑ —Ñ–∞–π–ª—É.")
                return config
        except (json.JSONDecodeError, Exception) as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
            return create_default_config()
    else:
        logging.info("–§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä–µ–Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞.")
        return create_default_config()

def create_default_config():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"""
    return {
        "telegram_token": "",
        "telegram_chat_id": "",
        "camera_ip": "",
        "camera_login": "",
        "camera_password": "",
        "recorder_ip": "",
        "recorder_login": "",
        "recorder_password": "",
        "recorder_port": "554",
        "recorder_channel": "1",
        "recorder_rtsp_template": "hikvision",
        "use_recorder": True,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–º—ñ—Å—Ç—å –æ–∫—Ä–µ–º–æ—ó –∫–∞–º–µ—Ä–∏
        "save_folder": str(DEFAULT_SAVE_FOLDER),
        "packers": []
    }

def save_config(config):
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —É —Ñ–∞–π–ª"""
    try:
        os.makedirs(os.path.dirname(CONFIG_FILE) if os.path.dirname(CONFIG_FILE) else ".", exist_ok=True)
        with open(CONFIG_FILE, "w", encoding="utf-8") as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
        logging.info("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É —Ñ–∞–π–ª.")
        return True
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
        return False

def ensure_save_folder(folder_path):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è"""
    try:
        Path(folder_path).mkdir(parents=True, exist_ok=True)
        logging.info(f"–ü–∞–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {folder_path}")
        return True
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")
        return False

def get_current_save_folder():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –ø–∞–ø–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    config = load_config()
    return config.get("save_folder", str(DEFAULT_SAVE_FOLDER))

# ============================================================================
# –§–£–ù–ö–¶–Ü–á –†–û–ë–û–¢–ò –ó –®–¢–†–ò–•–ö–û–î–ê–ú–ò
# ============================================================================

def generate_barcode_image(code):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –≤ –ø–∞–º'—è—Ç—ñ (–±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è)"""
    if not BARCODE_AVAILABLE:
        return None
    
    try:
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —à—Ç—Ä–∏—Ö–∫–æ–¥ Code128
        code128 = barcode.get_barcode_class('code128')
        barcode_instance = code128(code, writer=ImageWriter())
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ BytesIO (–≤ –ø–∞–º'—è—Ç—ñ)
        buffer = io.BytesIO()
        barcode_instance.write(buffer)
        buffer.seek(0)
        
        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —è–∫ PIL Image
        img = Image.open(buffer)
        
        logging.info(f"–®—Ç—Ä–∏—Ö–∫–æ–¥ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –≤ –ø–∞–º'—è—Ç—ñ –¥–ª—è –∫–æ–¥—É: {code}")
        return img
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —à—Ç—Ä–∏—Ö–∫–æ–¥–∞: {e}")
        return None

# ============================================================================
# –§–£–ù–ö–¶–Ü–á –†–û–ë–û–¢–ò –ó RTSP
# ============================================================================

def get_rtsp_templates():
    """–®–∞–±–ª–æ–Ω–∏ RTSP URL –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –≤–∏—Ä–æ–±–Ω–∏–∫—ñ–≤"""
    return {
        "hikvision": {
            "name": "Hikvision",
            "main": "rtsp://{login}:{password}@{ip}:{port}/Streaming/Channels/{channel}01",
            "sub": "rtsp://{login}:{password}@{ip}:{port}/Streaming/Channels/{channel}02"
        },
        "dahua": {
            "name": "Dahua",
            "main": "rtsp://{login}:{password}@{ip}:{port}/cam/realmonitor?channel={channel}&subtype=0",
            "sub": "rtsp://{login}:{password}@{ip}:{port}/cam/realmonitor?channel={channel}&subtype=1"
        },
        "generic": {
            "name": "–ó–∞–≥–∞–ª—å–Ω–∏–π",
            "main": "rtsp://{login}:{password}@{ip}:{port}/live/ch{channel}",
            "sub": "rtsp://{login}:{password}@{ip}:{port}/live/ch{channel}_sub"
        },
        "axis": {
            "name": "Axis",
            "main": "rtsp://{login}:{password}@{ip}:{port}/axis-media/media.amp?videocodec=h264&resolution=1920x1080",
            "sub": "rtsp://{login}:{password}@{ip}:{port}/axis-media/media.amp?videocodec=h264&resolution=640x480"
        },
        "foscam": {
            "name": "Foscam",
            "main": "rtsp://{login}:{password}@{ip}:{port}/videoMain",
            "sub": "rtsp://{login}:{password}@{ip}:{port}/videoSub"
        }
    }

def test_rtsp_connection(ip, port, login, password, template, channel):
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è RTSP –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"""
    if not RTSP_AVAILABLE:
        return False, "OpenCV –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install opencv-python"
    
    try:
        templates = get_rtsp_templates()
        
        if template not in templates:
            return False, f"–ù–µ–≤—ñ–¥–æ–º–∏–π —à–∞–±–ª–æ–Ω: {template}"
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ RTSP URL
        rtsp_data = templates[template]
        rtsp_url = rtsp_data["main"].format(
            login=login, 
            password=password, 
            ip=ip, 
            port=port, 
            channel=channel
        )
        
        logging.info(f"[RTSP Test] –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {rtsp_url}")
        
        # –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        cap = cv2.VideoCapture(rtsp_url)
        
        if not cap.isOpened():
            cap.release()
            return False, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ RTSP –ø–æ—Ç–æ–∫—É\n\nURL: {rtsp_url}\n\nüîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:\n‚Ä¢ IP-–∞–¥—Ä–µ—Å—É —Ç–∞ –ø–æ—Ä—Ç\n‚Ä¢ –õ–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å\n‚Ä¢ –ù–æ–º–µ—Ä –∫–∞–Ω–∞–ª—É\n‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂—ñ"
        
        # –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –∫–∞–¥—Ä
        ret, frame = cap.read()
        cap.release()
        
        if not ret or frame is None:
            return False, f"‚ùå RTSP –ø–æ—Ç—ñ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ, –∞–ª–µ –Ω–µ–º–∞—î –≤—ñ–¥–µ–æ\n\nURL: {rtsp_url}\n\nüîß –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:\n‚Ä¢ –ö–∞–Ω–∞–ª –≤–∏–º–∫–Ω–µ–Ω–∏–π\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∏ –∑ –∫–æ–¥–µ–∫–æ–º\n‚Ä¢ –ü–æ—Ç—ñ–∫ –∑–∞–π–Ω—è—Ç–∏–π —ñ–Ω—à–∏–º –∫–ª—ñ—î–Ω—Ç–æ–º"
        
        height, width = frame.shape[:2]
        info = f"‚úÖ RTSP –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!\n\n"
        info += f"–í–∏—Ä–æ–±–Ω–∏–∫: {rtsp_data['name']}\n"
        info += f"URL: {rtsp_url}\n"
        info += f"–†–æ–∑—à–∏—Ä–µ–Ω–Ω—è: {width}x{height}\n"
        info += f"–ö–∞–Ω–∞–ª: {channel}"
        
        return True, info
        
    except Exception as e:
        return False, f"–ü–æ–º–∏–ª–∫–∞ RTSP —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {str(e)}"

def get_rtsp_screenshot(ip, port, login, password, template, channel):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∑ RTSP –ø–æ—Ç–æ–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not RTSP_AVAILABLE:
        logging.error("[RTSP] OpenCV –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return None
    
    try:
        templates = get_rtsp_templates()
        
        if template not in templates:
            logging.error(f"[RTSP] –ù–µ–≤—ñ–¥–æ–º–∏–π —à–∞–±–ª–æ–Ω: {template}")
            return None
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ RTSP URL (—Å–ø–æ—á–∞—Ç–∫—É –æ—Å–Ω–æ–≤–Ω–∏–π –ø–æ—Ç—ñ–∫, –ø–æ—Ç—ñ–º —Å—É–±–ø–æ—Ç—ñ–∫)
        rtsp_data = templates[template]
        rtsp_urls = [
            rtsp_data["main"].format(login=login, password=password, ip=ip, port=port, channel=channel),
            rtsp_data["sub"].format(login=login, password=password, ip=ip, port=port, channel=channel)
        ]
        
        for rtsp_url in rtsp_urls:
            try:
                logging.info(f"[RTSP Screenshot] –°–ø—Ä–æ–±–∞: {rtsp_url}")
                
                cap = cv2.VideoCapture(rtsp_url)
                
                if not cap.isOpened():
                    logging.warning(f"[RTSP Screenshot] –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏: {rtsp_url}")
                    continue
                
                # –ß–∏—Ç–∞—î–º–æ –¥–µ–∫—ñ–ª—å–∫–∞ –∫–∞–¥—Ä—ñ–≤ –¥–ª—è —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó
                for i in range(5):
                    ret, frame = cap.read()
                    if not ret:
                        break
                
                cap.release()
                
                if ret and frame is not None:
                    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É temp, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
                    save_folder = Path(get_current_save_folder()) / "temp"
                    save_folder.mkdir(exist_ok=True)
                    screenshot_path = save_folder / f"rtsp_screenshot_{int(time.time())}.jpg"
                    
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–∫—Ä–∏–Ω—à–æ—Ç
                    cv2.imwrite(str(screenshot_path), frame)
                    
                    if screenshot_path.exists() and screenshot_path.stat().st_size > 1024:
                        logging.info(f"[RTSP Screenshot] –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ: {screenshot_path}")
                        return str(screenshot_path)
                    else:
                        if screenshot_path.exists():
                            screenshot_path.unlink()
                        logging.warning(f"[RTSP Screenshot] –§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∏–π")
                else:
                    logging.warning(f"[RTSP Screenshot] –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –∫–∞–¥—Ä –∑ {rtsp_url}")
                
            except Exception as e:
                logging.error(f"[RTSP Screenshot] –ü–æ–º–∏–ª–∫–∞ –¥–ª—è {rtsp_url}: {e}")
                continue
        
        logging.error("[RTSP Screenshot] –í—Å—ñ —Å–ø—Ä–æ–±–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–µ–≤–¥–∞–ª—ñ")
        return None
        
    except Exception as e:
        logging.error(f"[RTSP Screenshot] –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        return None

# ============================================================================
# –§–£–ù–ö–¶–Ü–á –†–û–ë–û–¢–ò –ó –ö–ê–ú–ï–†–û–Æ
# ============================================================================

def test_camera_connection_advanced(ip, login, password):
    """–†–æ–∑—à–∏—Ä–µ–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –∫–∞–º–µ—Ä–∏"""
    if not validate_ip_address(ip):
        return False, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ IP-–∞–¥—Ä–µ—Å–∞"
    
    # –°–ø–∏—Å–æ–∫ –º–æ–∂–ª–∏–≤–∏—Ö URL –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∫–∞–º–µ—Ä
    test_urls = [
        f"http://{ip}/cgi-bin/snapshot.cgi",  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π CGI
        f"http://{ip}/snapshot.cgi",          # –ë–µ–∑ cgi-bin
        f"http://{ip}/cgi-bin/snapshot.jpg",  # –ó —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º
        f"http://{ip}/snapshot.jpg",          # –ü—Ä–æ—Å—Ç–∏–π snapshot
        f"http://{ip}/image/jpeg.cgi",        # Axis –∫–∞–º–µ—Ä–∏
        f"http://{ip}/jpg/image.jpg",         # –î–µ—è–∫—ñ IP –∫–∞–º–µ—Ä–∏
        f"http://{ip}/videostream.cgi?rate=0&user={login}&pwd={password}",  # –ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤ URL
    ]
    
    results = []
    
    for url in test_urls:
        try:
            # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ –º–µ—Ç–æ–¥–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
            auth_methods = [
                ("Basic Auth", requests.auth.HTTPBasicAuth(login, password)),
                ("Digest Auth", requests.auth.HTTPDigestAuth(login, password)),
                ("No Auth", None),
            ]
            
            for auth_name, auth in auth_methods:
                try:
                    response = requests.get(url, auth=auth, timeout=5)
                    status = response.status_code
                    content_type = response.headers.get('content-type', '')
                    
                    result_info = f"{url} [{auth_name}] - Status: {status}"
                    
                    if status == 200:
                        if 'image' in content_type.lower():
                            return True, f"‚úÖ –£—Å–ø—ñ—Ö! {result_info}\n–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É: {content_type}"
                        else:
                            result_info += f" (–ù–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {content_type})"
                    elif status == 401:
                        result_info += " (–ü–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó)"
                    elif status == 404:
                        result_info += " (URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)"
                    elif status == 403:
                        result_info += " (–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ)"
                    
                    results.append(result_info)
                    
                except requests.exceptions.Timeout:
                    results.append(f"{url} [{auth_name}] - –¢–∞–π–º–∞—É—Ç")
                except requests.exceptions.ConnectionError:
                    results.append(f"{url} [{auth_name}] - –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è")
                except Exception as e:
                    results.append(f"{url} [{auth_name}] - –ü–æ–º–∏–ª–∫–∞: {str(e)}")
                    
        except Exception as e:
            results.append(f"{url} - –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
    
    return False, "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –∫–∞–º–µ—Ä–∏.\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:\n" + "\n".join(results)

def get_camera_snapshot_advanced(ip, login, password):
    """–ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω—ñ–º–∫—ñ–≤ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ä—ñ–∑–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤"""
    if not validate_ip_address(ip):
        logging.error(f"[Snapshot] –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ IP-–∞–¥—Ä–µ—Å–∞: {ip}")
        return None
    
    # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ URL —Ç–∞ –º–µ—Ç–æ–¥–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    urls_to_try = [
        f"http://{ip}/cgi-bin/snapshot.cgi",
        f"http://{ip}/snapshot.cgi",
        f"http://{ip}/cgi-bin/snapshot.jpg",
        f"http://{ip}/snapshot.jpg",
        f"http://{ip}/image/jpeg.cgi",
    ]
    
    auth_methods = [
        ("Basic", requests.auth.HTTPBasicAuth(login, password)),
        ("Digest", requests.auth.HTTPDigestAuth(login, password)),
    ]
    
    for url in urls_to_try:
        for auth_name, auth in auth_methods:
            try:
                logging.info(f"[Snapshot] –°–ø—Ä–æ–±–∞: {url} –∑ {auth_name} Auth")
                response = requests.get(url, auth=auth, stream=True, timeout=10)
                
                if response.status_code == 200:
                    content_type = response.headers.get('content-type', '')
                    if 'image' in content_type.lower():
                        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É temp, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
                        save_folder = Path(get_current_save_folder())
                        temp_folder = save_folder / "temp"
                        temp_folder.mkdir(parents=True, exist_ok=True)
                        img_path = temp_folder / f"snap_{int(time.time())}.jpg"
                        
                        with open(img_path, "wb") as f:
                            for chunk in response.iter_content(1024):
                                f.write(chunk)
                        
                        logging.info(f"[Snapshot] –ó–Ω—ñ–º–æ–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ: {img_path} (–º–µ—Ç–æ–¥: {auth_name}, URL: {url})")
                        return str(img_path)
                    else:
                        logging.warning(f"[Snapshot] –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {content_type}")
                else:
                    logging.warning(f"[Snapshot] HTTP {response.status_code} –¥–ª—è {url} –∑ {auth_name}")
                    
            except requests.exceptions.Timeout:
                logging.warning(f"[Snapshot] –¢–∞–π–º–∞—É—Ç –¥–ª—è {url} –∑ {auth_name}")
            except requests.exceptions.ConnectionError:
                logging.warning(f"[Snapshot] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–ª—è {url} –∑ {auth_name}")
            except Exception as e:
                logging.error(f"[Snapshot] –ü–æ–º–∏–ª–∫–∞ {url} –∑ {auth_name}: {e}")
    
    logging.error("[Snapshot] –í—Å—ñ —Å–ø—Ä–æ–±–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω—ñ–º–∫–∞ –Ω–µ–≤–¥–∞–ª—ñ")
    return None

# ============================================================================
# –§–£–ù–ö–¶–Ü–á –†–û–ë–û–¢–ò –ó TELEGRAM
# ============================================================================

def send_telegram_message(token, chat_id, message):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram"""
    if not token or not chat_id:
        logging.warning("[Telegram] –¢–æ–∫–µ–Ω –∞–±–æ Chat ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ")
        return False
    
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    try:
        response = requests.post(url, data={"chat_id": chat_id, "text": message}, timeout=10)
        if response.status_code == 200:
            logging.info(f"[Telegram] –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return True
        else:
            logging.error(f"[Telegram] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
    except Exception as e:
        logging.error(f"[Telegram Error] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        return False

def send_telegram_photo(token, chat_id, photo_path, caption=""):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤ Telegram"""
    if not token or not chat_id:
        logging.warning("[Telegram] –¢–æ–∫–µ–Ω –∞–±–æ Chat ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ")
        return False
    
    if not os.path.exists(photo_path):
        logging.error(f"[Telegram Photo] –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {photo_path}")
        return False
    
    url = f"https://api.telegram.org/bot{token}/sendPhoto"
    try:
        with open(photo_path, "rb") as f:
            files = {"photo": f}
            data = {"chat_id": chat_id, "caption": caption}
            response = requests.post(url, files=files, data=data, timeout=30)
            if response.status_code == 200:
                logging.info(f"[Telegram Photo] –§–æ—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –°—Ç–∞—Ç—É—Å: {response.status_code}")
                return True
            else:
                logging.error(f"[Telegram Photo] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ. –°—Ç–∞—Ç—É—Å: {response.status_code}")
                return False
    except Exception as e:
        logging.error(f"[Telegram Photo Error] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        return False

# ============================================================================
# –§–£–ù–ö–¶–Ü–á –†–û–ë–û–¢–ò –ó EXCEL
# ============================================================================

def log_to_excel(folder, barcode, timestamp):
    """–ó–∞–ø–∏—Å –¥–∞–Ω–∏—Ö –≤ Excel —Ñ–∞–π–ª"""
    try:
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        folder_path = Path(folder)
        folder_path.mkdir(parents=True, exist_ok=True)
        filename = folder_path / "session_log.xlsx"
        
        if filename.exists():
            wb = load_workbook(filename)
            ws = wb.active
        else:
            wb = Workbook()
            ws = wb.active
            ws.append(["–ß–∞—Å", "–®—Ç—Ä–∏—Ö–∫–æ–¥"])
        
        ws.append([timestamp, barcode])
        wb.save(filename)
        logging.info(f"[Excel] –ó–∞–ø–∏—Å –¥–æ –∂—É—Ä–Ω–∞–ª—É: {barcode} –æ {timestamp}")
        return True
    except Exception as e:
        logging.error(f"[Excel] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –≤ Excel: {e}")
        return False

# ============================================================================
# –ö–õ–ê–°–ò
# ============================================================================

class BarcodeProcessor:
    """–ö–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤"""
    
    def __init__(self, config):
        self.config = config
        self.current_packer = None
        self.session_folder = None
        logging.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ BarcodeProcessor.")

    def process_code(self, code):
        """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–¥—É"""
        code = code.strip()
        if not code:
            logging.warning("–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –∫–æ–¥")
            return "–ü–æ—Ä–æ–∂–Ω—ñ–π –∫–æ–¥"
        
        now_str = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–¥: {code}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ ID –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞ (3 —Ü–∏—Ñ—Ä–∏)
        if len(code) == 3 and code.isdigit():
            packer = next((p for p in self.config["packers"] if p["id"] == code), None)
            if packer:
                self.current_packer = packer
                # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É sessions
                save_folder = Path(self.config.get("save_folder", str(DEFAULT_SAVE_FOLDER)))
                sessions_folder = save_folder / "sessions"
                sessions_folder.mkdir(parents=True, exist_ok=True)
                self.session_folder = sessions_folder / f"{now_str}_{packer['name']}_{packer['id']}"
                try:
                    self.session_folder.mkdir(exist_ok=True)
                    logging.info(f"–û–±—Ä–∞–Ω–æ –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞: {packer['name']} (ID {packer['id']}). –°—Ç–≤–æ—Ä–µ–Ω–∞ —Å–µ—Å—ñ–π–Ω–∞ –ø–∞–ø–∫–∞ {self.session_folder}")
                    send_telegram_message(self.config["telegram_token"], self.config["telegram_chat_id"],
                                          f"üßë‚Äçüè≠ –ü–∞–∫—É–≤–∞–ª—å–Ω–∏–∫ {packer['name']} (#{packer['id']}) –ø–æ—á–∞–≤ —Ä–æ–±–æ—Ç—É.")
                    return f"–û–±—Ä–∞–Ω–æ –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞: {packer['name']}"
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ —Å–µ—Å—ñ—ó: {e}")
                    return "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ —Å–µ—Å—ñ—ó"
            else:
                logging.warning(f"–ü–∞–∫—É–≤–∞–ª—å–Ω–∏–∫ –∑ ID {code} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
                return f"–ü–∞–∫—É–≤–∞–ª—å–Ω–∏–∫ –∑ ID {code} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π"

        # –û–±—Ä–æ–±–∫–∞ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ —Ç–æ–≤–∞—Ä—É
        if self.current_packer:
            return self.process_product_barcode(code)
        else:
            logging.warning("–°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Å–∫–∞–Ω—É–π—Ç–µ ID –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞!")
            return "–°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Å–∫–∞–Ω—É–π—Ç–µ ID –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞!"

    def process_product_barcode(self, code):
        """–û–±—Ä–æ–±–∫–∞ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ —Ç–æ–≤–∞—Ä—É"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –¥–∂–µ—Ä–µ–ª–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä –∞–±–æ –æ–∫—Ä–µ–º–∞ –∫–∞–º–µ—Ä–∞
        snapshot_path = None
        
        if self.config.get("use_recorder", True) and self.config.get("recorder_ip"):
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–∫—Ä–∏–Ω—à–æ—Ç –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ RTSP
            logging.info("[Snapshot] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç—ñ–≤")
            snapshot_path = get_rtsp_screenshot(
                self.config["recorder_ip"],
                self.config.get("recorder_port", "554"),
                self.config["recorder_login"],
                self.config["recorder_password"],
                self.config.get("recorder_rtsp_template", "hikvision"),
                self.config.get("recorder_channel", "1")
            )
        elif self.config.get("camera_ip"):
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–∫—Ä–∏–Ω—à–æ—Ç –∑ –æ–∫—Ä–µ–º–æ—ó –∫–∞–º–µ—Ä–∏
            logging.info("[Snapshot] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–∫—Ä–µ–º—É –∫–∞–º–µ—Ä—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç—ñ–≤")
            snapshot_path = get_camera_snapshot_advanced(
                self.config["camera_ip"],
                self.config["camera_login"],
                self.config["camera_password"]
            )
        
        if snapshot_path:
            filename = f"{code}_{timestamp.replace(':', '-').replace(' ', '_')}.jpg"
            final_path = self.session_folder / filename
            
            try:
                if not OPENCV_AVAILABLE:
                    # –Ø–∫—â–æ OpenCV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª
                    import shutil
                    shutil.copy2(snapshot_path, final_path)
                else:
                    img = cv2.imread(snapshot_path)
                    if img is not None:
                        # –î–æ–¥–∞—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                        cv2.putText(img, f"{code} {timestamp}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX,
                                    1, (0, 0, 255), 2, cv2.LINE_AA)
                        
                        # –î–æ–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–∂–µ—Ä–µ–ª–æ
                        source_info = "–†–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä" if self.config.get("use_recorder", True) else "–ö–∞–º–µ—Ä–∞"
                        cv2.putText(img, f"–î–∂–µ—Ä–µ–ª–æ: {source_info}", (10, 70), cv2.FONT_HERSHEY_SIMPLEX,
                                    0.7, (0, 255, 0), 2, cv2.LINE_AA)
                        
                        cv2.imwrite(str(final_path), img)
                    else:
                        # Fallback - –∫–æ–ø—ñ—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª
                        import shutil
                        shutil.copy2(snapshot_path, final_path)
                
                # –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
                try:
                    Path(snapshot_path).unlink()
                except:
                    pass
                
                logging.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –ø—ñ–¥–ø–∏—Å–æ–º: {final_path}")

                # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ –≤ Telegram
                source_info = "–†–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä" if self.config.get("use_recorder", True) else "–ö–∞–º–µ—Ä–∞"
                caption = f"üì¶ –®—Ç—Ä–∏—Ö–∫–æ–¥: {code}\nüïí {timestamp}\nüë§ {self.current_packer['name']}\nüìπ –î–∂–µ—Ä–µ–ª–æ: {source_info}"
                send_telegram_photo(self.config["telegram_token"], self.config["telegram_chat_id"],
                                    str(final_path), caption)

                # –ó–∞–ø–∏—Å–∞—Ç–∏ –≤ Excel
                log_to_excel(str(self.session_folder), code, timestamp)
                
                return f"–û–±—Ä–æ–±–ª–µ–Ω–æ —à—Ç—Ä–∏—Ö–∫–æ–¥: {code} ({source_info})"
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
                return f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {str(e)}"
        else:
            logging.error("–ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç.")
            return "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∑ –∫–∞–º–µ—Ä–∏/—Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞"


class BarcodeDisplayWindow:
    """–û–∫—Ä–µ–º–µ –≤—ñ–∫–Ω–æ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞"""
    
    def __init__(self, parent, packer_name, packer_id):
        self.window = tk.Toplevel(parent)
        self.window.title(f"–®—Ç—Ä–∏—Ö–∫–æ–¥ –¥–ª—è {packer_name}")
        self.window.geometry("400x300")
        self.window.resizable(False, False)
        
        # –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–∫–Ω–∞
        self.window.transient(parent)
        self.window.grab_set()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(self.window, text=f"–®—Ç—Ä–∏—Ö–∫–æ–¥ –¥–ª—è –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞", 
                              font=("Arial", 14, "bold"))
        title_label.pack(pady=10)
        
        info_label = tk.Label(self.window, text=f"{packer_name} (ID: {packer_id})", 
                             font=("Arial", 12), fg="#2E7D32")
        info_label.pack(pady=5)
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —à—Ç—Ä–∏—Ö–∫–æ–¥
        barcode_img = generate_barcode_image(packer_id)
        
        if barcode_img:
            # –ó–º—ñ–Ω—é—î–º–æ —Ä–æ–∑–º—ñ—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            barcode_img = barcode_img.resize((300, 100), Image.Resampling.LANCZOS)
            self.photo = ImageTk.PhotoImage(barcode_img)
            
            # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —à—Ç—Ä–∏—Ö–∫–æ–¥
            barcode_label = tk.Label(self.window, image=self.photo, bg="white", 
                                   relief="solid", bd=2)
            barcode_label.pack(pady=20)
            
            # –¢–µ–∫—Å—Ç –∑ –∫–æ–¥–æ–º
            code_label = tk.Label(self.window, text=packer_id, 
                                 font=("Courier", 16, "bold"))
            code_label.pack(pady=5)
            
            # –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è
            instruction_label = tk.Label(self.window, 
                                       text="–ü—Ä–æ—Å–∫–∞–Ω—É–π—Ç–µ —Ü–µ–π –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É", 
                                       font=("Arial", 10), fg="#666666")
            instruction_label.pack(pady=5)
        else:
            error_label = tk.Label(self.window, text="–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —à—Ç—Ä–∏—Ö–∫–æ–¥–∞", 
                                 font=("Arial", 12), fg="red")
            error_label.pack(pady=20)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è
        close_btn = tk.Button(self.window, text="–ó–∞–∫—Ä–∏—Ç–∏", command=self.window.destroy,
                             bg="#f44336", fg="white", font=("Arial", 12, "bold"))
        close_btn.pack(pady=20)
        
        # ESC –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è
        self.window.bind('<Escape>', lambda e: self.window.destroy())
        self.window.focus_set()


class App:
    """–ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ–¥–∞—Ç–∫—É"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞ v3.0 - RTSP —Å–∫—Ä–∏–Ω—à–æ—Ç–∏")
        self.root.geometry("800x750")
        self.config = load_config()
        self.processor = BarcodeProcessor(self.config)
        
        # –°—Ç–∞—Ç—É—Å —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
        self.status_var = tk.StringVar()
        self.status_var.set("–ì–æ—Ç–æ–≤–æ")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        ensure_save_folder(self.config.get("save_folder", str(DEFAULT_SAVE_FOLDER)))

        self.create_widgets()
        self.root.bind("<Return>", self.scan_input_entered)
        
        # –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
        cleanup_temp_files()
        
        logging.info("–ó–∞–ø—É—â–µ–Ω–æ GUI –¥–æ–¥–∞—Ç–æ–∫.")

    def create_widgets(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –°—Ç–≤–æ—Ä—é—î–º–æ Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        main_frame = ttk.Frame(notebook)
        notebook.add(main_frame, text="üì± –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        
        # –í–∫–ª–∞–¥–∫–∞ 2: RTSP —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä
        recorder_frame = ttk.Frame(notebook)
        notebook.add(recorder_frame, text="üé• RTSP —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä")
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è
        scan_frame = ttk.Frame(notebook)
        notebook.add(scan_frame, text="üìä –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è")
        
        # –í–∫–ª–∞–¥–∫–∞ 4: Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        telegram_frame = ttk.Frame(notebook)
        notebook.add(telegram_frame, text="üì® Telegram")
        
        self.create_main_settings(main_frame)
        self.create_recorder_settings(recorder_frame)
        self.create_scan_interface(scan_frame)
        self.create_telegram_interface(telegram_frame)

    def browse_save_folder(self):
        """–í–∏–±—ñ—Ä –ø–∞–ø–∫–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è"""
        folder = filedialog.askdirectory(
            title="–û–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤",
            initialdir=self.save_path_var.get()
        )
        
        if folder:
            # –î–æ–¥–∞—î–º–æ –ø—ñ–¥–ø–∞–ø–∫—É SkanerFoto
            save_path = Path(folder) / "SkanerFoto"
            self.save_path_var.set(str(save_path))
            self.status_var.set(f"–û–±—Ä–∞–Ω–æ –ø–∞–ø–∫—É: {save_path}")

    def reset_default_path(self):
        """–°–∫–∏–¥–∞–Ω–Ω—è —à–ª—è—Ö—É –Ω–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"""
        self.save_path_var.set(str(DEFAULT_SAVE_FOLDER))
        self.status_var.set("–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–∞–ø–∫—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º")

    def create_main_settings(self, parent):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –æ—Å–Ω–æ–≤–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        # –û—Å–Ω–æ–≤–Ω–∞ —Ä–∞–º–∫–∞ –∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é
        canvas = tk.Canvas(parent)
        scrollbar = ttk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        main_frame = scrollable_frame
        
        # –®–ª—è—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        tk.Label(main_frame, text="üìÅ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤", font=("Arial", 12, "bold")).grid(row=0, column=0, columnspan=3, pady=(0,10), sticky="w")
        
        tk.Label(main_frame, text="–ü–∞–ø–∫–∞:").grid(row=1, column=0, sticky="e", padx=(0,5))
        
        # –§—Ä–µ–π–º –¥–ª—è —à–ª—è—Ö—É —Ç–∞ –∫–Ω–æ–ø–∫–∏
        path_frame = tk.Frame(main_frame)
        path_frame.grid(row=1, column=1, columnspan=2, sticky="ew", pady=(0,15))
        
        self.save_path_var = tk.StringVar()
        self.save_path_var.set(self.config.get("save_folder", str(DEFAULT_SAVE_FOLDER)))
        
        self.save_path_label = tk.Label(path_frame, textvariable=self.save_path_var, 
                                       bg="#E8F5E8", relief="sunken", anchor="w")
        self.save_path_label.pack(side="left", fill="x", expand=True)
        
        self.browse_btn = tk.Button(path_frame, text="üìÇ –û–±—Ä–∞—Ç–∏", command=self.browse_save_folder)
        self.browse_btn.pack(side="right", padx=(5,0))
        
        path_frame.columnconfigure(0, weight=1)

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∂–µ—Ä–µ–ª–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        tk.Label(main_frame, text="üì∏ –î–∂–µ—Ä–µ–ª–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å", font=("Arial", 12, "bold")).grid(row=2, column=0, columnspan=3, pady=(20,10), sticky="w")
        
        self.use_recorder_var = tk.BooleanVar()
        self.use_recorder_var.set(self.config.get("use_recorder", True))
        
        use_recorder_cb = tk.Checkbutton(main_frame, text="–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç—ñ–≤", 
                                        variable=self.use_recorder_var, font=("Arial", 11))
        use_recorder_cb.grid(row=3, column=0, columnspan=3, sticky="w", pady=(0,10))

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–∫—Ä–µ–º–æ—ó –∫–∞–º–µ—Ä–∏ (—è–∫—â–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä)
        tk.Label(main_frame, text="üì∑ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–∫—Ä–µ–º–æ—ó –∫–∞–º–µ—Ä–∏", font=("Arial", 12, "bold")).grid(row=4, column=0, columnspan=3, pady=(20,10), sticky="w")
        
        tk.Label(main_frame, text="IP –ö–∞–º–µ—Ä–∏:").grid(row=5, column=0, sticky="e", padx=(0,5))
        self.ip_entry = tk.Entry(main_frame, width=40)
        self.ip_entry.insert(0, self.config["camera_ip"])
        self.ip_entry.grid(row=5, column=1, sticky="ew")
        
        self.test_btn = tk.Button(main_frame, text="üîç –¢–µ—Å—Ç", command=self.test_camera_advanced)
        self.test_btn.grid(row=5, column=2, padx=(5,0))

        tk.Label(main_frame, text="–õ–æ–≥—ñ–Ω:").grid(row=6, column=0, sticky="e", padx=(0,5))
        self.login_entry = tk.Entry(main_frame, width=40)
        self.login_entry.insert(0, self.config["camera_login"])
        self.login_entry.grid(row=6, column=1, columnspan=2, sticky="ew")

        tk.Label(main_frame, text="–ü–∞—Ä–æ–ª—å:").grid(row=7, column=0, sticky="e", padx=(0,5))
        self.pass_entry = tk.Entry(main_frame, width=40, show="*")
        self.pass_entry.insert(0, self.config["camera_password"])
        self.pass_entry.grid(row=7, column=1, columnspan=2, sticky="ew")

        # –ü–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∏
        tk.Label(main_frame, text="üë∑ –ü–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∏", font=("Arial", 12, "bold")).grid(row=8, column=0, columnspan=3, pady=(20,10), sticky="w")
        
        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫—É –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫—ñ–≤ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        packers_frame = tk.Frame(main_frame)
        packers_frame.grid(row=9, column=0, columnspan=3, sticky="ew", pady=(0,10))
        
        # –°–ø–∏—Å–æ–∫ –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫—ñ–≤
        self.packers_listbox = tk.Listbox(packers_frame, height=8, width=50)
        self.packers_listbox.grid(row=0, column=0, sticky="ew")
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫—ñ–≤
        packer_buttons_frame = tk.Frame(packers_frame)
        packer_buttons_frame.grid(row=0, column=1, padx=(10,0), sticky="n")
        
        self.add_btn = tk.Button(packer_buttons_frame, text="‚ûï –î–æ–¥–∞—Ç–∏", command=self.add_packer)
        self.add_btn.pack(fill=tk.X, pady=(0,5))
        
        self.del_btn = tk.Button(packer_buttons_frame, text="üóë –í–∏–¥–∞–ª–∏—Ç–∏", command=self.del_packer)
        self.del_btn.pack(fill=tk.X, pady=(0,5))
        
        self.show_barcode_btn = tk.Button(packer_buttons_frame, text="üìä –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–¥", 
                                         command=self.show_barcode_for_selected, 
                                         bg="#FF9800", fg="white")
        self.show_barcode_btn.pack(fill=tk.X, pady=(0,5))
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∏
        info_text = tk.Text(packer_buttons_frame, height=4, width=20, font=("Arial", 8), 
                           bg="#FFF3E0", fg="#E65100")
        info_text.pack(fill=tk.X, pady=(10,0))
        info_text.insert(tk.END, "üí° –ü–æ—Ä–∞–¥–∞:\n\n–û–±–µ—Ä—ñ—Ç—å –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–¥' —â–æ–± –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥ –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")
        info_text.configure(state='disabled')
        
        packers_frame.columnconfigure(0, weight=1)
        
        self.refresh_packers()

        # –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        self.save_btn = tk.Button(main_frame, text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", command=self.save_all, bg="#4CAF50", fg="white", font=("Arial", 10, "bold"))
        self.save_btn.grid(row=10, column=0, columnspan=3, pady=20, sticky="ew")

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Ç—è–≥—É–≤–∞–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤
        main_frame.columnconfigure(1, weight=1)

    def create_recorder_settings(self, parent):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å RTSP —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        # –†–∞–º–∫–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å RTSP —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        main_frame = tk.Frame(parent, padx=10, pady=10)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(main_frame, text="üé• –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è RTSP —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞", font=("Arial", 14, "bold")).grid(row=0, column=0, columnspan=3, pady=(0,20), sticky="w")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ OpenCV
        if not RTSP_AVAILABLE:
            warning_frame = tk.Frame(main_frame, bg="#FFEBEE", relief="solid", bd=1)
            warning_frame.grid(row=1, column=0, columnspan=3, sticky="ew", pady=(0,20))
            
            warning_label = tk.Label(warning_frame, 
                                   text="‚ö†Ô∏è OpenCV –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\n–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∫–æ–º–∞–Ω–¥–æ—é:\npip install opencv-python",
                                   bg="#FFEBEE", fg="#C62828", font=("Arial", 10, "bold"))
            warning_label.pack(pady=15)
        
        # IP –∞–¥—Ä–µ—Å–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        tk.Label(main_frame, text="IP –†–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞:").grid(row=2, column=0, sticky="e", padx=(0,5))
        self.recorder_ip_entry = tk.Entry(main_frame, width=40)
        self.recorder_ip_entry.insert(0, self.config.get("recorder_ip", ""))
        self.recorder_ip_entry.grid(row=2, column=1, sticky="ew")
        
        self.test_rtsp_btn = tk.Button(main_frame, text="üîç –¢–µ—Å—Ç RTSP", command=self.test_rtsp_connection)
        self.test_rtsp_btn.grid(row=2, column=2, padx=(5,0))

        # –ü–æ—Ä—Ç RTSP
        tk.Label(main_frame, text="–ü–æ—Ä—Ç:").grid(row=3, column=0, sticky="e", padx=(0,5))
        self.recorder_port_entry = tk.Entry(main_frame, width=10)
        self.recorder_port_entry.insert(0, self.config.get("recorder_port", "554"))
        self.recorder_port_entry.grid(row=3, column=1, sticky="w")
        
        tk.Label(main_frame, text="(–∑–∞–∑–≤–∏—á–∞–π 554 –¥–ª—è RTSP)").grid(row=3, column=2, sticky="w", padx=(10,0))

        # –õ–æ–≥—ñ–Ω –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        tk.Label(main_frame, text="–õ–æ–≥—ñ–Ω:").grid(row=4, column=0, sticky="e", padx=(0,5))
        self.recorder_login_entry = tk.Entry(main_frame, width=40)
        self.recorder_login_entry.insert(0, self.config.get("recorder_login", ""))
        self.recorder_login_entry.grid(row=4, column=1, columnspan=2, sticky="ew")

        # –ü–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        tk.Label(main_frame, text="–ü–∞—Ä–æ–ª—å:").grid(row=5, column=0, sticky="e", padx=(0,5))
        self.recorder_pass_entry = tk.Entry(main_frame, width=40, show="*")
        self.recorder_pass_entry.insert(0, self.config.get("recorder_password", ""))
        self.recorder_pass_entry.grid(row=5, column=1, columnspan=2, sticky="ew")

        # –®–∞–±–ª–æ–Ω –≤–∏—Ä–æ–±–Ω–∏–∫–∞
        tk.Label(main_frame, text="–í–∏—Ä–æ–±–Ω–∏–∫:").grid(row=6, column=0, sticky="e", padx=(0,5))
        
        self.template_var = tk.StringVar()
        self.template_var.set(self.config.get("recorder_rtsp_template", "hikvision"))
        
        template_frame = tk.Frame(main_frame)
        template_frame.grid(row=6, column=1, columnspan=2, sticky="ew")
        
        templates = get_rtsp_templates()
        for i, (key, data) in enumerate(templates.items()):
            rb = tk.Radiobutton(template_frame, text=data["name"], variable=self.template_var, 
                               value=key, font=("Arial", 9))
            rb.grid(row=i//3, column=i%3, sticky="w", padx=(0,10))
        
        # –ö–∞–Ω–∞–ª
        tk.Label(main_frame, text="–ö–∞–Ω–∞–ª:").grid(row=7, column=0, sticky="e", padx=(0,5))
        self.recorder_channel_entry = tk.Entry(main_frame, width=10)
        self.recorder_channel_entry.insert(0, self.config.get("recorder_channel", "1"))
        self.recorder_channel_entry.grid(row=7, column=1, sticky="w")
        
        tk.Label(main_frame, text="(–Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª—É: 1, 2, 3...)").grid(row=7, column=2, sticky="w", padx=(10,0))

        # –ü—Ä–∏–∫–ª–∞–¥–∏ RTSP URL
        example_frame = tk.LabelFrame(main_frame, text="üìã –ü—Ä–∏–∫–ª–∞–¥–∏ RTSP URL", font=("Arial", 10, "bold"))
        example_frame.grid(row=8, column=0, columnspan=3, pady=(20,0), sticky="ew")
        
        examples_text = tk.Text(example_frame, height=8, width=70, wrap=tk.WORD, 
                               bg="#F8F9FA", fg="#333333", font=("Courier", 9))
        examples_text.pack(padx=10, pady=10, fill="both")
        
        examples_content = """Hikvision:
rtsp://admin:password@192.168.1.100:554/Streaming/Channels/101

Dahua:
rtsp://admin:password@192.168.1.100:554/cam/realmonitor?channel=1&subtype=0

Axis:
rtsp://admin:password@192.168.1.100:554/axis-media/media.amp

Foscam:
rtsp://admin:password@192.168.1.100:554/videoMain

–ó–∞–≥–∞–ª—å–Ω–∏–π:
rtsp://admin:password@192.168.1.100:554/live/ch1"""
        
        examples_text.insert(tk.END, examples_content)
        examples_text.configure(state='disabled')

        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π —Ç–µ–∫—Å—Ç
        info_text = tk.Text(main_frame, height=6, width=70, wrap=tk.WORD, bg="#E8F5E8", fg="#2E7D32")
        info_text.grid(row=9, column=0, columnspan=3, pady=(10,0), sticky="ew")
        
        info_content = """üí° –ü–µ—Ä–µ–≤–∞–≥–∏ RTSP –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç—ñ–≤:

‚úÖ –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—ñ—Å—Ç—å - –ø—Ä–∞—Ü—é—î –∑ —É—Å—ñ–º–∞ IP –∫–∞–º–µ—Ä–∞–º–∏ —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
‚úÖ –®–≤–∏–¥–∫—ñ—Å—Ç—å - –º–∏—Ç—Ç—î–≤—ñ —Å–∫—Ä–∏–Ω—à–æ—Ç–∏ –±–µ–∑ –∑–∞—Ç—Ä–∏–º–æ–∫  
‚úÖ –Ø–∫—ñ—Å—Ç—å - –≤–∏—Å–æ–∫–∞ —Ä–æ–∑–¥—ñ–ª—å–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å
‚úÖ –ù–∞–¥—ñ–π–Ω—ñ—Å—Ç—å - —Å—Ç–∞–±—ñ–ª—å–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚úÖ –ï–∫–æ–Ω–æ–º—ñ—è —Ä–µ—Å—É—Ä—Å—ñ–≤ - —Ç—ñ–ª—å–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∏, –±–µ–∑ –∑–∞–ø–∏—Å—É –≤—ñ–¥–µ–æ

üîß –ü–æ—Ä–∞–¥–∞: –î–ª—è –∫—Ä–∞—â–æ—ó —è–∫–æ—Å—Ç—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–∏–π –ø–æ—Ç—ñ–∫ (main stream)."""
        
        info_text.insert(tk.END, info_content)
        info_text.configure(state='disabled')

        # –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.save_recorder_btn = tk.Button(main_frame, text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è RTSP", command=self.save_recorder_settings, bg="#2196F3", fg="white", font=("Arial", 10, "bold"))
        self.save_recorder_btn.grid(row=10, column=0, columnspan=3, pady=20, sticky="ew")

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Ç—è–≥—É–≤–∞–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤
        main_frame.columnconfigure(1, weight=1)

    def create_scan_interface(self, parent):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
        # –†–∞–º–∫–∞ –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
        main_frame = tk.Frame(parent, padx=10, pady=10)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(main_frame, text="üì± –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤", font=("Arial", 14, "bold")).grid(row=0, column=0, columnspan=3, pady=(0,20), sticky="w")
        
        # –ü–æ–ª–µ –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑ –≤–µ–ª–∏–∫–∏–º –ø—ñ–¥–ø–∏—Å–æ–º
        tk.Label(main_frame, text="üîç –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∑—ñ —Å–∫–∞–Ω–µ—Ä–∞:", font=("Arial", 12, "bold"), bg="#E3F2FD", fg="#1976D2").grid(row=1, column=0, columnspan=3, pady=(0,10), sticky="ew", ipady=10)
        
        # –í–µ–ª–∏–∫–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–¥—É
        self.scan_entry = tk.Entry(main_frame, font=("Courier", 20), bg="#FFF3E0", fg="#E65100", bd=3, relief="solid")
        self.scan_entry.grid(row=2, column=0, columnspan=3, pady=10, sticky="ew", ipady=15)
        self.scan_entry.focus()

        # –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
        instructions = tk.Label(main_frame, text="üìã –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:\n\n1Ô∏è‚É£ –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Å–∫–∞–Ω—É–π—Ç–µ ID –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞ (–±—É–¥—å-—è–∫–∏–π –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π)\n2Ô∏è‚É£ –ü–æ—Ç—ñ–º —Å–∫–∞–Ω—É–π—Ç–µ —à—Ç—Ä–∏—Ö–∫–æ–¥–∏ —Ç–æ–≤–∞—Ä—ñ–≤\n3Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è\n\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–±–ª—è—Ç—å—Å—è –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞", 
                               font=("Arial", 11), justify="left", bg="#F1F8E9", fg="#33691E", padx=20, pady=15)
        instructions.grid(row=3, column=0, columnspan=3, pady=(20,10), sticky="ew")

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        status_frame = tk.Frame(main_frame, relief=tk.SUNKEN, bd=2, bg="#ECEFF1")
        status_frame.grid(row=4, column=0, columnspan=3, sticky="ew", pady=(20,10))
        
        self.status_label = tk.Label(status_frame, textvariable=self.status_var, anchor="w", font=("Arial", 12), bg="#ECEFF1", fg="#37474F")
        self.status_label.pack(fill=tk.X, padx=10, pady=8)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
        cleanup_frame = tk.Frame(main_frame)
        cleanup_frame.grid(row=5, column=0, columnspan=3, pady=(30,0), sticky="ew")
        
        tk.Label(cleanup_frame, text="üßπ –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ñ–∞–π–ª—ñ–≤", font=("Arial", 12, "bold")).pack(pady=(0,10))
        
        self.cleanup_btn = tk.Button(cleanup_frame, text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª–∏ —Å—Ç–∞—Ä—à–µ 2 —Ç–∏–∂–Ω—ñ–≤", 
                                   command=self.cleanup_old_files_dialog, 
                                   bg="#FF5722", fg="white", font=("Arial", 11, "bold"))
        self.cleanup_btn.pack(pady=5)
        
        tk.Label(cleanup_frame, text="‚ö†Ô∏è –£–≤–∞–≥–∞: –¶—è –¥—ñ—è –≤–∏–¥–∞–ª–∏—Ç—å –≤—Å—ñ —Ñ–∞–π–ª–∏ —Ç–∞ –ø–∞–ø–∫–∏ —Å–µ—Å—ñ–π,\n—Å—Ç–≤–æ—Ä–µ–Ω—ñ –±—ñ–ª—å—à–µ –Ω—ñ–∂ 2 —Ç–∏–∂–Ω—ñ —Ç–æ–º—É", 
                font=("Arial", 9), fg="#666666").pack(pady=(5,0))

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Ç—è–≥—É–≤–∞–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤
        main_frame.columnconfigure(0, weight=1)

    def create_telegram_interface(self, parent):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        # –†–∞–º–∫–∞ –¥–ª—è Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        main_frame = tk.Frame(parent, padx=10, pady=10)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(main_frame, text="üì® –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è Telegram", font=("Arial", 14, "bold")).grid(row=0, column=0, columnspan=3, pady=(0,20), sticky="w")
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram
        tk.Label(main_frame, text="ü§ñ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞", font=("Arial", 12, "bold")).grid(row=1, column=0, columnspan=3, pady=(0,10), sticky="w")
        
        tk.Label(main_frame, text="Token:").grid(row=2, column=0, sticky="e", padx=(0,5))
        self.token_entry = tk.Entry(main_frame, width=40, show="*")
        self.token_entry.insert(0, self.config["telegram_token"])
        self.token_entry.grid(row=2, column=1, columnspan=2, sticky="ew")

        tk.Label(main_frame, text="Chat ID:").grid(row=3, column=0, sticky="e", padx=(0,5))
        self.chat_entry = tk.Entry(main_frame, width=40)
        self.chat_entry.insert(0, self.config["telegram_chat_id"])
        self.chat_entry.grid(row=3, column=1, columnspan=2, sticky="ew")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Telegram
        self.save_telegram_btn = tk.Button(main_frame, text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram", 
                                         command=self.save_telegram_settings, 
                                         bg="#2196F3", fg="white", font=("Arial", 10, "bold"))
        self.save_telegram_btn.grid(row=4, column=0, columnspan=3, pady=(10,20), sticky="ew")
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        tk.Label(main_frame, text="üí¨ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å", font=("Arial", 12, "bold")).grid(row=5, column=0, columnspan=3, pady=(20,10), sticky="w")
        
        # –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        self.message_text = tk.Text(main_frame, height=6, width=60, font=("Arial", 11), bg="#F8F9FA", bd=2, relief="solid")
        self.message_text.grid(row=6, column=0, columnspan=3, pady=(0,10), sticky="ew")
        
        # –®–≤–∏–¥–∫—ñ —à–∞–±–ª–æ–Ω–∏
        tk.Label(main_frame, text="üöÄ –®–≤–∏–¥–∫—ñ —à–∞–±–ª–æ–Ω–∏:", font=("Arial", 11, "bold")).grid(row=7, column=0, columnspan=3, pady=(20,10), sticky="w")
        
        templates_frame = tk.Frame(main_frame)
        templates_frame.grid(row=8, column=0, columnspan=3, sticky="ew", pady=(0,10))
        
        # –ö–Ω–æ–ø–∫–∏ —à–∞–±–ª–æ–Ω—ñ–≤
        templates = [
            ("üïê –ü–µ—Ä–µ—Ä–≤–∞", "‚è∞ –ü–µ—Ä–µ—Ä–≤–∞ –Ω–∞ –æ–±—ñ–¥\nüçΩÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è —á–µ—Ä–µ–∑ 30 —Ö–≤–∏–ª–∏–Ω"),
            ("‚úÖ –ö—ñ–Ω–µ—Ü—å –∑–º—ñ–Ω–∏", "üéØ –ó–º—ñ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\nüìä –í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ"),
            ("üö® –ü—Ä–æ–±–ª–µ–º–∞", "‚ùó –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞\nüîß –ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞"),
            ("üì¶ –¢–æ–≤–∞—Ä –≤—ñ–¥—Å—É—Ç–Ω—ñ–π", "‚ùå –¢–æ–≤–∞—Ä –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –Ω–∞ —Å–∫–ª–∞–¥—ñ\nüìã –û—á—ñ–∫—É—î–º–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è")
        ]
        
        for i, (name, template) in enumerate(templates):
            btn = tk.Button(templates_frame, text=name, 
                          command=lambda t=template: self.insert_template(t),
                          bg="#E3F2FD", fg="#1976D2", font=("Arial", 9))
            btn.grid(row=i//2, column=i%2, padx=5, pady=2, sticky="ew")
        
        templates_frame.columnconfigure(0, weight=1)
        templates_frame.columnconfigure(1, weight=1)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        self.send_message_btn = tk.Button(main_frame, text="üì§ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", 
                                        command=self.send_custom_message, 
                                        bg="#4CAF50", fg="white", font=("Arial", 12, "bold"))
        self.send_message_btn.grid(row=9, column=0, columnspan=3, pady=20, sticky="ew")
        
        # –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        tk.Label(main_frame, text="üìã –Ü—Å—Ç–æ—Ä—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:", font=("Arial", 11, "bold")).grid(row=10, column=0, columnspan=3, pady=(20,10), sticky="w")
        
        self.history_text = tk.Text(main_frame, height=8, width=60, font=("Arial", 9), bg="#FAFAFA", state='disabled', bd=1, relief="solid")
        self.history_text.grid(row=11, column=0, columnspan=3, sticky="ew")
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
        self.clear_history_btn = tk.Button(main_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é", 
                                         command=self.clear_message_history, 
                                         bg="#FF5722", fg="white", font=("Arial", 10))
        self.clear_history_btn.grid(row=12, column=0, columnspan=3, pady=10, sticky="ew")

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Ç—è–≥—É–≤–∞–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤
        main_frame.columnconfigure(0, weight=1)

    # ========================================================================
    # –ú–ï–¢–û–î–ò –†–û–ë–û–¢–ò –ó TELEGRAM
    # ========================================================================

    def insert_template(self, template):
        """–í—Å—Ç–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω—É –≤ –ø–æ–ª–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        self.message_text.delete(1.0, tk.END)
        self.message_text.insert(tk.END, template)

    def send_custom_message(self):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        message = self.message_text.get(1.0, tk.END).strip()
        
        if not message:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏!")
            return
        
        if not self.config.get("telegram_token") or not self.config.get("telegram_chat_id"):
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Ç–æ–∫–µ–Ω —Ç–∞ Chat ID –≤ –æ—Å–Ω–æ–≤–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö!")
            return
        
        self.status_var.set("–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
        self.root.update()
        
        def send_in_thread():
            try:
                success = send_telegram_message(self.config["telegram_token"], 
                                              self.config["telegram_chat_id"], 
                                              message)
                
                if success:
                    # –î–æ–¥–∞—î–º–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
                    timestamp = datetime.now().strftime("%H:%M:%S")
                    history_entry = f"[{timestamp}] ‚úÖ {message[:50]}{'...' if len(message) > 50 else ''}\n"
                    
                    self.root.after(0, lambda: self.add_to_history(history_entry))
                    self.root.after(0, lambda: self.message_text.delete(1.0, tk.END))
                    self.root.after(0, lambda: self.status_var.set("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ"))
                    self.root.after(0, lambda: messagebox.showinfo("‚úÖ –£—Å–ø—ñ—Ö", "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!"))
                else:
                    self.root.after(0, lambda: self.status_var.set("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏"))
                    self.root.after(0, lambda: messagebox.showerror("‚ùå –ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"))
                    
            except Exception as e:
                self.root.after(0, lambda: self.status_var.set("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏"))
                self.root.after(0, lambda: messagebox.showerror("‚ùå –ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {str(e)}"))
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        thread = threading.Thread(target=send_in_thread)
        thread.daemon = True
        thread.start()

    def add_to_history(self, entry):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó"""
        self.history_text.configure(state='normal')
        self.history_text.insert(tk.END, entry)
        self.history_text.see(tk.END)
        self.history_text.configure(state='disabled')

    def clear_message_history(self):
        """–û—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        result = messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å?")
        if result:
            self.history_text.configure(state='normal')
            self.history_text.delete(1.0, tk.END)
            self.history_text.configure(state='disabled')

    # ========================================================================
    # –ú–ï–¢–û–î–ò –†–û–ë–û–¢–ò –ó –ü–ê–ö–£–í–ê–õ–¨–ù–ò–ö–ê–ú–ò
    # ========================================================================

    def refresh_packers(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫—ñ–≤"""
        self.packers_listbox.delete(0, tk.END)
        for p in self.config["packers"]:
            self.packers_listbox.insert(tk.END, f"{p['id']}: {p['name']}")
        logging.info("–û–Ω–æ–≤–ª–µ–Ω–æ —Å–ø–∏—Å–æ–∫ –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫—ñ–≤.")

    def add_packer(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        pid = simpledialog.askstring("ID –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞", "–í–≤–µ–¥—ñ—Ç—å 3-–∑–Ω–∞—á–Ω–∏–π ID –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞:")
        if not pid:
            return
        
        if not (len(pid) == 3 and pid.isdigit()):
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "ID –º–∞—î –±—É—Ç–∏ 3-–∑–Ω–∞—á–Ω–∏–º —á–∏—Å–ª–æ–º!")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å ID
        if any(p["id"] == pid for p in self.config["packers"]):
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ü–∞–∫—É–≤–∞–ª—å–Ω–∏–∫ –∑ —Ç–∞–∫–∏–º ID –≤–∂–µ —ñ—Å–Ω—É—î!")
            return
        
        name = simpledialog.askstring("–Ü–º'—è –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞", "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞:")
        if name:
            self.config["packers"].append({"id": pid, "name": name.strip()})
            self.refresh_packers()
            logging.info(f"–î–æ–¥–∞–Ω–æ –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞: {name} (ID {pid}).")
            self.status_var.set(f"–î–æ–¥–∞–Ω–æ –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞: {name}")

    def del_packer(self):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        idx = self.packers_listbox.curselection()
        if not idx:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–û–±–µ—Ä—ñ—Ç—å –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è!")
            return
        
        packer = self.config["packers"][idx[0]]
        result = messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", f"–í–∏–¥–∞–ª–∏—Ç–∏ –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞ {packer['name']} (ID {packer['id']})?")
        
        if result:
            removed = self.config["packers"].pop(idx[0])
            self.refresh_packers()
            logging.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞: {removed['name']} (ID {removed['id']}).")
            self.status_var.set(f"–í–∏–¥–∞–ª–µ–Ω–æ –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞: {removed['name']}")

    def show_barcode_for_selected(self):
        """–ü–æ–∫–∞–∑ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        if not BARCODE_AVAILABLE:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ú–æ–¥—É–ª—å barcode –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\n–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install python-barcode[images]")
            return
            
        idx = self.packers_listbox.curselection()
        if not idx:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–û–±–µ—Ä—ñ—Ç—å –ø–∞–∫—É–≤–∞–ª—å–Ω–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑—É —à—Ç—Ä–∏—Ö–∫–æ–¥–∞!")
            return
        
        packer = self.config["packers"][idx[0]]
        
        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –≤—ñ–∫–Ω–æ –∑ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º
        BarcodeDisplayWindow(self.root, packer['name'], packer['id'])

    # ========================================================================
    # –ú–ï–¢–û–î–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø
    # ========================================================================

    def test_camera_advanced(self):
        """–†–æ–∑—à–∏—Ä–µ–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏"""
        ip = self.ip_entry.get().strip()
        login = self.login_entry.get().strip()
        password = self.pass_entry.get()
        
        if not ip:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å IP-–∞–¥—Ä–µ—Å—É –∫–∞–º–µ—Ä–∏!")
            return
        
        self.status_var.set("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏...")
        self.root.update()
        
        success, message = test_camera_connection_advanced(ip, login, password)
        
        if success:
            messagebox.showinfo("‚úÖ –ö–∞–º–µ—Ä–∞ –ø—Ä–∞—Ü—é—î", message)
            self.status_var.set("–ö–∞–º–µ—Ä–∞ –ø—Ä–∞—Ü—é—î")
        else:
            messagebox.showerror("‚ùå –ü—Ä–æ–±–ª–µ–º–∏ –∑ –∫–∞–º–µ—Ä–æ—é", message)
            self.status_var.set("–ü—Ä–æ–±–ª–µ–º–∏ –∑ –∫–∞–º–µ—Ä–æ—é")

    def test_rtsp_connection(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è RTSP –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"""
        if not RTSP_AVAILABLE:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "OpenCV –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\n–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install opencv-python")
            return
            
        ip = self.recorder_ip_entry.get().strip()
        port = self.recorder_port_entry.get().strip()
        login = self.recorder_login_entry.get().strip()
        password = self.recorder_pass_entry.get()
        template = self.template_var.get()
        channel = self.recorder_channel_entry.get().strip()
        
        if not ip:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å IP-–∞–¥—Ä–µ—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        if not validate_ip_address(ip):
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ IP-–∞–¥—Ä–µ—Å–∞!")
            return
            
        if not port or not port.isdigit():
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ø–æ—Ä—Ç!")
            return
        
        if not channel or not channel.isdigit():
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª—É!")
            return
        
        self.status_var.set("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è RTSP...")
        self.root.update()
        
        def test_in_thread():
            try:
                success, message = test_rtsp_connection(ip, port, login, password, template, channel)
                
                if success:
                    self.root.after(0, lambda: messagebox.showinfo("‚úÖ RTSP –ø—Ä–∞—Ü—é—î", message))
                    self.root.after(0, lambda: self.status_var.set("RTSP —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∞—Ü—é—î"))
                else:
                    self.root.after(0, lambda: messagebox.showerror("‚ùå –ü—Ä–æ–±–ª–µ–º–∏ –∑ RTSP", message))
                    self.root.after(0, lambda: self.status_var.set("–ü—Ä–æ–±–ª–µ–º–∏ –∑ RTSP"))
                    
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror("‚ùå –ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {str(e)}"))
                self.root.after(0, lambda: self.status_var.set("–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"))
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        thread = threading.Thread(target=test_in_thread)
        thread.daemon = True
        thread.start()

    # ========================================================================
    # –ú–ï–¢–û–î–ò –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨
    # ========================================================================

    def save_all(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –æ—Å–Ω–æ–≤–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
        ip = self.ip_entry.get().strip()
        if ip and not validate_ip_address(ip):
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ IP-–∞–¥—Ä–µ—Å–∞ –∫–∞–º–µ—Ä–∏!")
            return
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —à–ª—è—Ö—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        save_path = self.save_path_var.get()
        if not save_path:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è!")
            return
        
        self.config["telegram_token"] = self.token_entry.get().strip()
        self.config["telegram_chat_id"] = self.chat_entry.get().strip()
        self.config["camera_ip"] = ip
        self.config["camera_login"] = self.login_entry.get().strip()
        self.config["camera_password"] = self.pass_entry.get()
        self.config["use_recorder"] = self.use_recorder_var.get()
        self.config["save_folder"] = save_path
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        ensure_save_folder(save_path)
        
        if save_config(self.config):
            self.processor = BarcodeProcessor(self.config)
            logging.info("–ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
            messagebox.showinfo("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
            self.status_var.set("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
        else:
            messagebox.showerror("‚ùå –ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è!")
            self.status_var.set("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")

    def save_recorder_settings(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å RTSP —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è IP —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        recorder_ip = self.recorder_ip_entry.get().strip()
        if recorder_ip and not validate_ip_address(recorder_ip):
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ IP-–∞–¥—Ä–µ—Å–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ—Ä—Ç—É
        port = self.recorder_port_entry.get().strip()
        if port and not port.isdigit():
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ü–æ—Ä—Ç –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!")
            return
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–∞–Ω–∞–ª—É
        channel = self.recorder_channel_entry.get().strip()
        if channel and not channel.isdigit():
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ö–∞–Ω–∞–ª –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!")
            return
        
        self.config["recorder_ip"] = recorder_ip
        self.config["recorder_port"] = port if port else "554"
        self.config["recorder_login"] = self.recorder_login_entry.get().strip()
        self.config["recorder_password"] = self.recorder_pass_entry.get()
        self.config["recorder_channel"] = channel if channel else "1"
        self.config["recorder_rtsp_template"] = self.template_var.get()
        
        if save_config(self.config):
            self.processor = BarcodeProcessor(self.config)
            logging.info("–ó–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è RTSP —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            messagebox.showinfo("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è RTSP —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
            self.status_var.set("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è RTSP –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
        else:
            messagebox.showerror("‚ùå –ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è!")
            self.status_var.set("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")

    # ========================================================================
    # –ú–ï–¢–û–î–ò –û–ß–ò–©–ï–ù–ù–Ø
    # ========================================================================

    def cleanup_old_files_dialog(self):
        """–î—ñ–∞–ª–æ–≥ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
        result = messagebox.askyesnocancel("üóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤", 
                                          "–í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏ —Ç–∞ –ø–∞–ø–∫–∏ —Å–µ—Å—ñ–π —Å—Ç–∞—Ä—à–µ 2 —Ç–∏–∂–Ω—ñ–≤?\n\n‚ö†Ô∏è –¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω—è!", 
                                          icon="warning")
        
        if result:
            self.status_var.set("–û—á–∏—â–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤...")
            self.root.update()
            
            def cleanup_in_thread():
                try:
                    deleted_count = cleanup_old_files()
                    
                    if deleted_count >= 0:
                        self.root.after(0, lambda: messagebox.showinfo("‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ", 
                                                                       f"–í–∏–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: {deleted_count}"))
                        self.root.after(0, lambda: self.status_var.set(f"–û—á–∏—â–µ–Ω–æ {deleted_count} —Ñ–∞–π–ª—ñ–≤"))
                    else:
                        self.root.after(0, lambda: messagebox.showerror("‚ùå –ü–æ–º–∏–ª–∫–∞", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Ñ–∞–π–ª—ñ–≤"))
                        self.root.after(0, lambda: self.status_var.set("–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è"))
                        
                except Exception as e:
                    self.root.after(0, lambda: messagebox.showerror("‚ùå –ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è: {str(e)}"))
                    self.root.after(0, lambda: self.status_var.set("–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è"))
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—á–∏—â–µ–Ω–Ω—è –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            thread = threading.Thread(target=cleanup_in_thread)
            thread.daemon = True
            thread.start()

    # ========================================================================
    # –û–°–ù–û–í–ù–Ü –ú–ï–¢–û–î–ò –†–û–ë–û–¢–ò
    # ========================================================================

    # ========================================================================
    # –ú–ï–¢–û–î–ò –†–û–ë–û–¢–ò
    # ========================================================================

    def browse_save_folder(self):
        """–í–∏–±—ñ—Ä –ø–∞–ø–∫–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è"""
        folder = filedialog.askdirectory(
            title="–û–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤",
            initialdir=self.save_path_var.get()
        )
        
        if folder:
            # –î–æ–¥–∞—î–º–æ –ø—ñ–¥–ø–∞–ø–∫—É SkanerFoto
            save_path = Path(folder) / "SkanerFoto"
            self.save_path_var.set(str(save_path))
            self.status_var.set(f"–û–±—Ä–∞–Ω–æ –ø–∞–ø–∫—É: {save_path}")

    def scan_input_entered(self, event):
        """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–¥—É –∑—ñ —Å–∫–∞–Ω–µ—Ä–∞"""
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª—ñ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
        if self.root.focus_get() == self.scan_entry:
            code = self.scan_entry.get().strip()
            if code:
                logging.info(f"–í–≤–µ–¥–µ–Ω–æ –∫–æ–¥ —É —Å–∫–∞–Ω–µ—Ä: {code}")
                self.status_var.set("–û–±—Ä–æ–±–∫–∞ –∫–æ–¥—É...")
                self.root.update()
                
                try:
                    result = self.processor.process_code(code)
                    self.status_var.set(result)
                except Exception as e:
                    error_msg = f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {str(e)}"
                    logging.error(error_msg)
                    self.status_var.set(error_msg)
                    messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", error_msg)
                
                self.scan_entry.delete(0, tk.END)


# ============================================================================
# –¢–û–ß–ö–ê –í–•–û–î–£ –í –ü–†–û–ì–†–ê–ú–£
# ============================================================================

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏"""
    try:
        root = tk.Tk()
        app = App(root)
        root.mainloop()
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        print(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")


if __name__ == "__main__":
    main()
